parameters{
	daysToKeep as integer (90)
}
source(output(
		id as long,
		id_sessione as string,
		id_dominio as string,
		iuv as string,
		ccp as string,
		id_carrello as string,
		tipo as string,
		timestamp_evento as timestamp,
		source as string,
		source_type as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.messaggi WHERE timestamp_evento < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> messaggiRead
source(output(
		obj_id as long,
		ident_dominio as string,
		iuv as string,
		ccp as string,
		id_sessione as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.cd_info_pagamento WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> cdInfoPagamentoRead
source(output(
		id as long,
		progressivo as integer,
		tipo_bollo as string,
		hash_documento as string,
		provincia_residenza as string,
		fk_rpt_versamenti as long,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.rpt_versamenti_bollo WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> rptVersamentiBolloRead
source(output(
		id as long,
		progressivo as integer,
		importo as float,
		commissione_carico_pa as float,
		iban as string,
		iban_appoggio as string,
		bic_accredito as string,
		bic_appoggio as string,
		credenziali_pagatore as string,
		causale_versamento as string,
		tipo_versamento as string,
		dati_specifici_riscossione as string,
		fk_rpt as long,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.rpt_versamenti WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> rptVersamentiRead
source(output(
		rpt_id as long,
		tipo_soggetto as string,
		tipo_identificativo_univoco as string,
		codice_identificativo_univoco as string,
		anagrafica as string,
		indirizzo as string,
		civico as string,
		cap as string,
		localita as string,
		provincia as string,
		nazione as string,
		email as string,
		codice_unitoper as string,
		denomin_unitoper as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.rpt_soggetti WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> rptSoggettiRead
source(output(
		pa_fiscal_code as string,
		notice_id as string,
		creditor_reference_id as string,
		payment_token as string,
		paaattivarptresp as string,
		nodoinviarptreq as string,
		paaattivarpterror as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string,
		retry_pending as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.rpt_activations WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> rptActivationsRead
source(output(
		id as long,
		id_sessione as string,
		id_sessione_originale as string,
		id_dominio as string,
		iuv as string,
		ccp as string,
		stato as string,
		inserted_by as string,
		inserted_timestamp as timestamp
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.stati_rpt WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> statiRptRead
source(output(
		id_dominio as string,
		iuv as string,
		ccp as string,
		id_sessione as string,
		stato as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string,
		push as integer
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.stati_rpt_snapshot WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> statiRptSnapshotRead
source(output(
		id_sessione as string,
		id_carrello as string,
		stato as string,
		inserted_by as string,
		inserted_timestamp as timestamp,
		id_sessione_originale as string,
		id as long
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.stati_carrello WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> statiCarrelloRead
source(output(
		id_sessione as string,
		id_carrello as string,
		stato as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.stati_carrello_snapshot WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> statiCarrelloSnapshotRead
source(output(
		id as long,
		progressivo as integer,
		tipo_bollo as string,
		tipo_allegato_ricevuta as string,
		iubd as string,
		stato as string,
		importo as decimal(19,0),
		ora_acquisto as timestamp,
		fk_rt_versamenti as long,
		ack_impronta as integer,
		ack_iudb as integer,
		ack_codice_fiscale as integer,
		ack_denominazione as integer,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.rt_versamenti_bollo WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> rtVersamentiBolloRead
source(output(
		id as long,
		progressivo as integer,
		importo_rt as float,
		esito as string,
		causale_versamento as string,
		dati_specifici_riscossione as string,
		commissione_applicate_psp as float,
		fk_rt as long,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		commissione_carico_pa as float,
		commissione_applicate_pa as float
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.rt_versamenti WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> rtVersamentiRead
source(output(
		id as long,
		ccp as string,
		ident_dominio as string,
		iuv as string,
		fk_rt as long,
		tipo_firma as string,
		xml_content as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		id_sessione as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.rt_xml WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> rtXmlRead
source(output(
		id as long,
		ccp as string,
		ident_dominio as string,
		iuv as string,
		fk_rpt as long,
		fk_carrello as long,
		id_sessione as string,
		id_carrello as string,
		xml_content as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.rpt_xml WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> rptXmlRead
source(output(
		id as long,
		id_sessione as string,
		tipo as string,
		mobile_token as string,
		rrn as string,
		tipo_interazione as string,
		importo_totale_pagato as float,
		esito_transazione_carta as string,
		codice_autorizzativo as string,
		timestamp_operazione as timestamp,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		motivo_annullamento as string,
		codice_convenzione as string,
		codice_autorizzativo_paypal as string,
		id_transazione_psp_paypal as string,
		id_transazione_pm_paypal as string,
		id_transazione_pm_bpay as string,
		id_transazione_psp_bpay as string,
		outcome_payment_gateway as string,
		commissione as float,
		codice_autorizzativo_bpay as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.pm_session_data WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> pmSessionDataRead
source(output(
		id as long,
		transaction_id as string,
		key as string,
		value as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.pm_metadata WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> pmMetadataRead
source(output(
		id as long,
		primitiva as string,
		psp_id as string,
		pa_fiscal_code as string,
		notice_id as string,
		idempotency_key as string,
		token as string,
		valid_to as timestamp,
		hash_request as string,
		response as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.idempotency_cache WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> idempotencyCacheRead
source(output(
		transaction_id as string,
		payment_tokens as string,
		num_token as integer,
		valid_to as timestamp,
		inserted_timestamp as timestamp,
		inserted_by as string,
		busy as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.nmu_cancel_utility WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> nmuCancelUtilityRead
source(output(
		id as long,
		pa_fiscal_code as string,
		notice_id as string,
		creditor_reference_id as string,
		psp_id as string,
		idempotency_key as string,
		payment_token as string,
		token_valid_from as timestamp,
		token_valid_to as timestamp,
		due_date as timestamp,
		amount as decimal(38,18),
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string,
		payment_method as string,
		touchpoint as string,
		suggested_idbundle as string,
		suggested_idcibundle as string,
		suggested_user_fee as decimal(38,18),
		suggested_pa_fee as decimal(38,18)
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.position_activate WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> positionActivateRead
source(output(
		id as long,
		pa_fiscal_code as string,
		notice_id as string,
		status as string,
		inserted_timestamp as timestamp,
		creditor_reference_id as string,
		payment_token as string,
		inserted_by as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.position_payment_status WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> positionPaymentStatusRead
source(output(
		id as long,
		pa_fiscal_code as string,
		notice_id as string,
		creditor_reference_id as string,
		payment_token as string,
		status as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		fk_position_payment as long,
		inserted_by as string,
		updated_by as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.position_payment_status_snapshot WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> positionPaymentStatusSnapshotRead
source(output(
		id as long,
		pa_fiscal_code as string,
		notice_id as string,
		creditor_reference_id as string,
		payment_token as string,
		recipient_pa_fiscal_code as string,
		recipient_broker_pa_id as string,
		recipient_station_id as string,
		status as string,
		inserted_timestamp as timestamp,
		fk_position_receipt_recipient as long,
		inserted_by as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.position_receipt_recipient_status WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> positionReceiptRecipientStatusRead
source(output(
		fk_position_receipt as long,
		fk_position_transfer as long,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.position_receipt_transfer WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> positionReceiptTransferRead
source(output(
		id as long,
		notice_id as string,
		creditor_reference_id as string,
		pa_fiscal_code as string,
		pa_fiscal_code_secondary as string,
		iban as string,
		amount as float,
		remittance_information as string,
		transfer_category as string,
		transfer_identifier as string,
		valid as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		fk_payment_plan as long,
		fk_position_payment as long,
		inserted_by as string,
		updated_by as string,
		metadata as string,
		req_tipo_bollo as string,
		req_hash_documento as string,
		req_provincia_residenza as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.position_transfer WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> positionTransferRead
source(output(
		id as long,
		pa_fiscal_code as string,
		notice_id as string,
		creditor_reference_id as string,
		payment_token as string,
		recipient_pa_fiscal_code as string,
		recipient_broker_pa_id as string,
		recipient_station_id as string,
		status as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		fk_position_receipt as long,
		fk_receipt_xml as long,
		inserted_by as string,
		updated_by as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.position_receipt_recipient WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> positionReceiptRecipientRead
source(output(
		id as long,
		pa_fiscal_code as string,
		notice_id as string,
		creditor_reference_id as string,
		payment_token as string,
		xml as binary,
		inserted_timestamp as timestamp,
		fk_position_receipt as long,
		recipient_pa_fiscal_code as string,
		recipient_broker_pa_id as string,
		recipient_station_id as string,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.position_receipt_xml WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> positionReceiptXmlRead
source(output(
		id as long,
		receipt_id as string,
		notice_id as string,
		pa_fiscal_code as string,
		creditor_reference_id as string,
		payment_token as string,
		outcome as string,
		payment_amount as decimal(38,18),
		description as string,
		company_name as string,
		office_name as string,
		debtor_id as long,
		psp_id as string,
		psp_fiscal_code as string,
		psp_vat_number as string,
		psp_company_name as string,
		channel_id as string,
		channel_description as string,
		payer_id as decimal(38,18),
		payment_method as string,
		fee as decimal(38,18),
		payment_date_time as timestamp,
		application_date as date,
		transfer_date as date,
		metadata as string,
		rt_id as long,
		fk_position_payment as long,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string,
		fee_pa as decimal(38,18),
		bundle_id as string,
		bundle_pa_id as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.position_receipt WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> positionReceiptRead
source(output(
		id as long,
		pa_fiscal_code as string,
		notice_id as string,
		creditor_reference_id as string,
		token1 as string,
		token2 as string,
		fk_payment1 as long,
		fk_payment2 as long,
		fk_rpt1 as long,
		fk_rpt2 as long,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string,
		inserted_timestamp as timestamp
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.token_utility WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> tokenUtilityRead
source(output(
		id as long,
		pa_fiscal_code as string,
		notice_id as string,
		creditor_reference_id as string,
		payment_token as string,
		broker_pa_id as string,
		station_id as string,
		station_version as integer,
		psp_id as string,
		broker_psp_id as string,
		channel_id as string,
		idempotency_key as string,
		amount as decimal(38,18),
		fee as decimal(38,18),
		outcome as string,
		payment_method as string,
		payment_channel as string,
		transfer_date as date,
		payer_id as long,
		application_date as date,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		fk_payment_plan as long,
		rpt_id as long,
		payment_type as string,
		carrello_id as long,
		original_payment_token as string,
		flag_io as string,
		ricevuta_pm as string,
		flag_activate_resp_missing as string,
		flag_paypal as string,
		inserted_by as string,
		updated_by as string,
		transaction_id as string,
		close_version as string,
		fee_pa as decimal(38,18),
		bundle_id as string,
		bundle_pa_id as string,
		pm_info as binary,
		mbd as string,
		fee_spo as decimal(19,0)
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.position_payment WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> positionPaymentRead
source(output(
		id as long,
		pa_fiscal_code as string,
		notice_id as string,
		creditor_reference_id as string,
		due_date as timestamp,
		retention_date as timestamp,
		amount as decimal(38,18),
		flag_final_payment as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		metadata as string,
		fk_position_service as long,
		inserted_by as string,
		updated_by as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.position_payment_plan WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> positionPaymentPlanRead
source(output(
		id as long,
		pa_fiscal_code as string,
		notice_id as string,
		status as string,
		inserted_timestamp as timestamp,
		inserted_by as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.position_status WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> positionStatusRead
source(output(
		id as long,
		pa_fiscal_code as string,
		notice_id as string,
		status as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		fk_position_service as long,
		activation_pending as string,
		inserted_by as string,
		updated_by as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.position_status_snapshot WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> positionStatusSnapshotRead
source(output(
		id as long,
		pa_fiscal_code as string,
		notice_id as string,
		description as string,
		company_name as string,
		office_name as string,
		debtor_id as long,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.position_service WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> positionServiceRead
source(output(
		id as long,
		subject_type as string,
		entity_unique_identifier_type as string,
		entity_unique_identifier_value as string,
		full_name as string,
		street_name as string,
		civic_number as string,
		postal_code as string,
		city as string,
		state_province_region as string,
		country as string,
		email as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.position_subject WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> positionSubjectRead
source(output(
		id as long,
		fk_position_transfer as long,
		tipo_bollo as string,
		tipo_allegato_ricevuta as string,
		iubd as string,
		importo as decimal(19,0),
		ora_acquisto as timestamp,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string,
		xml_content as binary
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.position_transfer_mbd WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> positionTransferMbdRead
source(output(
		id as long,
		id_sessione as string,
		ccp as string,
		ident_dominio as string,
		iuv as string,
		cod_esito as integer,
		esito as string,
		data_ricevuta as timestamp,
		data_richiesta as timestamp,
		id_ricevuta as string,
		id_richiesta as string,
		somma_versamenti as float,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		canale as string,
		notifica_processata as string,
		generata_da as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.rt WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> rtRead
source(output(
		id as long,
		id_sessione as string,
		ccp as string,
		ident_dominio as string,
		iuv as string,
		bic_addebito as string,
		data_msg_rich as timestamp,
		flag_canc as string,
		iban_addebito as string,
		id_msg_rich as string,
		staz_intermediariopa as string,
		intermediariopa as string,
		canale as string,
		psp as string,
		intermediariopsp as string,
		tipo_versamento as string,
		num_versamenti as integer,
		rt_signature_code as integer,
		somma_versamenti as float,
		parametri_profilo_pagamento as string,
		fk_carrello as long,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		ricevuta_pm as string,
		wisp_2 as string,
		flag_seconda as string,
		flag_io as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.rpt WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> rptRead
source(output(
		id as long,
		id_sessione as string,
		data_msg_rich as timestamp,
		id_carrello as string,
		staz_intermediariopa as string,
		intermediariopa as string,
		canale as string,
		psp as string,
		intermediariopsp as string,
		tipo_versamento as string,
		parametri_profilo_pagamento as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		codice_convenzione as string,
		flag_multibeneficiario as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.carrello WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> carrelloRead
source(output(
		id as long,
		id_sessione as string,
		id_sessione_originale as string,
		id_carrello as string,
		id_canale as string,
		id_stazione as string,
		id_dominio as string,
		iuv as string,
		ccp as string,
		stato as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string,
		retry as integer
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.retry_rpt_notifica_cancellazione WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> retryRptNotificaCancellazioneRead
source(output(
		id as long,
		id_sessione as string,
		id_carrello as string,
		id_canale as string,
		id_dominio as string,
		iuv as string,
		ccp as string,
		stato as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string,
		retry as integer,
		id_sessione_originale as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.retry_rpt WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> retryRptRead
source(output(
		id as long,
		pa_fiscal_code as string,
		iuv as string,
		token as string,
		retry as integer,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		ready as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.retry_pa_attiva_rpt WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> retryPaAttivaRptRead
source(output(
		id as long,
		id_sessione as string,
		id_sessione_originale as string,
		id_carrello as string,
		id_canale as string,
		id_stazione as string,
		id_dominio as string,
		iuv as string,
		ccp as string,
		stato as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string,
		retry as integer
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.retry_psp_notifica_cancellazione_rpt WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> retryPspNotificaCancellazioneRptRead
source(output(
		id as long,
		id_sessione as string,
		id_canale as string,
		id_dominio as string,
		iuv as string,
		ccp as string,
		stato as string,
		psp as string,
		inserted_timestamp as timestamp,
		inserted_by as string,
		updated_timestamp as timestamp,
		updated_by as string,
		retry as integer,
		identificativo_messaggio_ricevuta_rt as string,
		data_ora_messaggio_ricevuta_rt as timestamp,
		stato_messaggio_rt as string,
		motivazione_messaggio_rt as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.retry_psp_ack WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> retryPspAckRead
source(output(
		id as long,
		id_sessione as string,
		id_stazione as string,
		id_intermediario_pa as string,
		id_canale as string,
		id_sessione_originale as string,
		id_dominio as string,
		iuv as string,
		ccp as string,
		stato as string,
		inserted_timestamp as timestamp,
		inserted_by as string,
		updated_timestamp as timestamp,
		updated_by as string,
		retry as integer,
		stato_rpt as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.retry_pa_invia_rt WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> retryPaInviaRtRead
source(output(
		id as long,
		payment_token as string,
		id_dominio as string,
		iuv as string,
		ccp as string,
		notice_id as string,
		creditor_reference_id as string,
		psp_transaction_id as string,
		psp_id as string,
		stazione as string,
		canale as string,
		id_sessione_originale as string,
		outcome as string,
		retry as integer,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string,
		version as string,
		request as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.position_retry_sendpaymentresult WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> positionRetrySendpaymentresultRead
source(output(
		id as long,
		pa_fiscal_code as string,
		iuv as string,
		id_psp as string,
		id_broker_psp as string,
		id_channel as string,
		payment_token as string,
		fk_position_payment as long,
		fk_messaggi as long,
		retry as integer,
		status as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.position_retry_psp_send_payment WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> positionRetryPspSendPaymentRead
source(output(
		id as long,
		pa_fiscal_code as string,
		notice_id as string,
		token as string,
		fk_recipient as long,
		retry as integer,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.position_retry_pa_send_rt WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> positionRetryPaSendRtRead
source(output(
		id as long,
		data as timestamp,
		esito as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.registro_chiamate_notifica_rt WHERE data < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> registroChiamateNotificaRtRead
source(output(
		id as long,
		ccpost as string,
		notice_id as string,
		pa_fiscal_code as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ("SELECT * FROM online.verifica_bollettino WHERE inserted_timestamp < (NOW()::date - '{$daysToKeep} DAY'::interval)"),
	format: 'query') ~> verificaBollettinoRead
messaggiRead alterRow(deleteIf(toDate(toString(timestamp_evento,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordMessaggiToDelete
cdInfoPagamentoRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordCdInfoPagamentoToDelete
rptVersamentiBolloRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordRptVersamentiBolloToDelete
rptVersamentiRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordRptVersamentiToDelete
rptSoggettiRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordRptSoggettiToDelete
rptActivationsRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordRptActivationsToDelete
statiRptRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordStatiRptToDelete
statiRptSnapshotRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordStatiRptSnapshotToDelete
statiCarrelloRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordStatiCarrelloToDelete
statiCarrelloSnapshotRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordStatiCarrelloSnapshotToDelete
rtVersamentiBolloRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordRtVersamentiBolloToDelete
rtVersamentiRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordRtVersamentiToDelete
rtXmlRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordRtXmlToDelete
rptXmlRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordRptXmlToDelete
pmSessionDataRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordPmSessionDataToDelete
pmMetadataRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordPmMetadataToDelete
idempotencyCacheRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordIdempotencyCacheToDelete
nmuCancelUtilityRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordNmuCancelUtilityToDelete
positionActivateRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordPositionActivateToDelete
positionPaymentStatusRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordPositionPaymentStatusToDelete
positionPaymentStatusSnapshotRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordPositionPaymentStatusSnapshotToDelete
positionReceiptRecipientStatusRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordPositionReceiptRecipientStatusToDelete
positionReceiptTransferRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordPositionReceiptTransferToDelete
positionTransferRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordPositionTransferToDelete
positionReceiptRecipientRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordPositionReceiptRecipientToDelete
positionReceiptXmlRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordPositionReceiptXmlToDelete
positionReceiptRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordPositionReceiptToDelete
tokenUtilityRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordTokenUtilityToDelete
positionPaymentRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordPositionPaymentToDelete
positionPaymentPlanRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordPositionPaymentPlanToDelete
positionStatusRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordPositionStatusToDelete
positionStatusSnapshotRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordPositionStatusSnapshotToDelete
positionServiceRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordPositionServiceToDelete
positionSubjectRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordPositionSubjectToDelete
positionTransferMbdRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordPositionTransferMbdToDelete
rtRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordRtToDelete
rptRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordRptToDelete
carrelloRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordCarrelloToDelete
retryRptNotificaCancellazioneRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordRetryRptNotificaCancellazioneToDelete
retryRptRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordRetryRptToDelete
retryPaAttivaRptRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordRetryPaAttivaRptToDelete
retryPspNotificaCancellazioneRptRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordRetryPspNotificaCancellazioneRptToDelete
retryPspAckRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordRetryPspAckToDelete
retryPaInviaRtRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordRetryPaInviaRtToDelete
positionRetrySendpaymentresultRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordPositionRetrySendpaymentresultToDelete
positionRetryPspSendPaymentRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordPositionRetryPspSendPaymentToDelete
positionRetryPaSendRtRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordPositionRetryPaSendRtToDelete
registroChiamateNotificaRtRead alterRow(deleteIf(toDate(toString(data,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordRegistroChiamateNotificaRtToDelete
verificaBollettinoRead alterRow(deleteIf(toDate(toString(inserted_timestamp,'dd-MM-yyyy','it-IT'),'dd-MM-yyyy','it-IT')<currentDate())) ~> markRecordVerificaBollettinoToDelete
markRecordMessaggiToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		id_sessione as string,
		id_dominio as string,
		iuv as string,
		ccp as string,
		id_carrello as string,
		tipo as string,
		timestamp_evento as timestamp,
		source as string,
		source_type as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 1) ~> executeMessaggiDeleteDB
markRecordCdInfoPagamentoToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		obj_id as decimal(0,0),
		ident_dominio as string,
		iuv as string,
		ccp as string,
		id_sessione as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['obj_id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 2) ~> executeCdInfoPagamentoDeleteDB
markRecordRptVersamentiBolloToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		progressivo as decimal(19,0),
		tipo_bollo as string,
		hash_documento as string,
		provincia_residenza as string,
		fk_rpt_versamenti as decimal(19,0),
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 3) ~> executeRptVersamentiBolloDeleteDB
markRecordRptVersamentiToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		progressivo as decimal(19,0),
		importo as float,
		commissione_carico_pa as float,
		iban as string,
		iban_appoggio as string,
		bic_accredito as string,
		bic_appoggio as string,
		credenziali_pagatore as string,
		causale_versamento as string,
		tipo_versamento as string,
		dati_specifici_riscossione as string,
		fk_rpt as decimal(19,0),
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 4) ~> executeRptVersamentiDeleteDB
markRecordRptSoggettiToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		rpt_id as decimal(19,0),
		tipo_soggetto as string,
		tipo_identificativo_univoco as string,
		codice_identificativo_univoco as string,
		anagrafica as string,
		indirizzo as string,
		civico as string,
		cap as string,
		localita as string,
		provincia as string,
		nazione as string,
		email as string,
		codice_unitoper as string,
		denomin_unitoper as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['rpt_id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 5) ~> executeRptSoggettiDeleteDB
markRecordRptActivationsToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		pa_fiscal_code as string,
		notice_id as string,
		creditor_reference_id as string,
		payment_token as string,
		paaattivarptresp as string,
		nodoinviarptreq as string,
		paaattivarpterror as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string,
		retry_pending as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['pa_fiscal_code','notice_id','creditor_reference_id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 6) ~> executeRptActivationsDeleteDB
markRecordStatiRptToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		id_sessione as string,
		id_sessione_originale as string,
		id_dominio as string,
		iuv as string,
		ccp as string,
		stato as string,
		inserted_by as string,
		inserted_timestamp as timestamp
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 7) ~> executeStatiRptDeleteDB
markRecordStatiRptSnapshotToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id_dominio as string,
		iuv as string,
		ccp as string,
		id_sessione as string,
		stato as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string,
		push as decimal(1,0)
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id_dominio','iuv','ccp'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 8) ~> executeStatiRptSnapshotDeleteDB
markRecordStatiCarrelloToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id_sessione as string,
		id_carrello as string,
		stato as string,
		inserted_by as string,
		inserted_timestamp as timestamp,
		id_sessione_originale as string,
		id as long
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 9) ~> executeStatiCarrelloDeleteDB
markRecordStatiCarrelloSnapshotToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id_sessione as string,
		id_carrello as string,
		stato as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id_sessione'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 10) ~> executeStatiCarrelloSnapshotDeleteDB
markRecordRtVersamentiBolloToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		progressivo as decimal(19,0),
		tipo_bollo as string,
		tipo_allegato_ricevuta as string,
		iubd as string,
		stato as string,
		importo as decimal(19,0),
		ora_acquisto as timestamp,
		fk_rt_versamenti as decimal(19,0),
		ack_impronta as decimal(19,0),
		ack_iudb as decimal(19,0),
		ack_codice_fiscale as decimal(19,0),
		ack_denominazione as decimal(19,0),
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 11) ~> executeRtVersamentiBolloDeleteDB
markRecordRtVersamentiToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		progressivo as decimal(19,0),
		importo_rt as float,
		esito as string,
		causale_versamento as string,
		dati_specifici_riscossione as string,
		commissione_applicate_psp as float,
		fk_rt as decimal(19,0),
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		commissione_carico_pa as float,
		commissione_applicate_pa as float
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 12) ~> executeRtVersamentiDeleteDB
markRecordRtXmlToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		ccp as string,
		ident_dominio as string,
		iuv as string,
		fk_rt as decimal(19,0),
		tipo_firma as string,
		xml_content as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		id_sessione as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 13) ~> executeRtXmlDeleteDB
markRecordRptXmlToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		ccp as string,
		ident_dominio as string,
		iuv as string,
		fk_rpt as decimal(19,0),
		fk_carrello as decimal(19,0),
		id_sessione as string,
		id_carrello as string,
		xml_content as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 14) ~> executeRptXmlDeleteDB
markRecordPmSessionDataToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		id_sessione as string,
		tipo as string,
		mobile_token as string,
		rrn as string,
		tipo_interazione as string,
		importo_totale_pagato as float,
		esito_transazione_carta as string,
		codice_autorizzativo as string,
		timestamp_operazione as timestamp,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		motivo_annullamento as string,
		codice_convenzione as string,
		codice_autorizzativo_paypal as string,
		id_transazione_psp_paypal as string,
		id_transazione_pm_paypal as string,
		id_transazione_pm_bpay as string,
		id_transazione_psp_bpay as string,
		outcome_payment_gateway as string,
		commissione as float,
		codice_autorizzativo_bpay as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 15) ~> executePmSessionDataDeleteDB
markRecordPmMetadataToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		transaction_id as string,
		key as string,
		value as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 16) ~> executePmMetadataDeleteDB
markRecordIdempotencyCacheToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		primitiva as string,
		psp_id as string,
		pa_fiscal_code as string,
		notice_id as string,
		idempotency_key as string,
		token as string,
		valid_to as timestamp,
		hash_request as string,
		response as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 17) ~> executeIdempotencyCacheDeleteDB
markRecordNmuCancelUtilityToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		transaction_id as string,
		payment_tokens as string,
		num_token as decimal(1,0),
		valid_to as timestamp,
		inserted_timestamp as timestamp,
		inserted_by as string,
		busy as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['transaction_id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 18) ~> executeNmuCancelUtilityDeleteDB
markRecordPositionActivateToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		pa_fiscal_code as string,
		notice_id as string,
		creditor_reference_id as string,
		psp_id as string,
		idempotency_key as string,
		payment_token as string,
		token_valid_from as timestamp,
		token_valid_to as timestamp,
		due_date as timestamp,
		amount as decimal(0,0),
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string,
		payment_method as string,
		touchpoint as string,
		suggested_idbundle as string,
		suggested_idcibundle as string,
		suggested_user_fee as decimal(0,0),
		suggested_pa_fee as decimal(0,0)
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 19) ~> executePositionActivateDeleteDB
markRecordPositionPaymentStatusToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		pa_fiscal_code as string,
		notice_id as string,
		status as string,
		inserted_timestamp as timestamp,
		creditor_reference_id as string,
		payment_token as string,
		inserted_by as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 20) ~> executePositionPaymentStatusDeleteDB
markRecordPositionPaymentStatusSnapshotToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		pa_fiscal_code as string,
		notice_id as string,
		creditor_reference_id as string,
		payment_token as string,
		status as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		fk_position_payment as decimal(0,0),
		inserted_by as string,
		updated_by as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 21) ~> executePositionPaymentStatusSnapshotDeleteDB
markRecordPositionReceiptRecipientStatusToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		pa_fiscal_code as string,
		notice_id as string,
		creditor_reference_id as string,
		payment_token as string,
		recipient_pa_fiscal_code as string,
		recipient_broker_pa_id as string,
		recipient_station_id as string,
		status as string,
		inserted_timestamp as timestamp,
		fk_position_receipt_recipient as decimal(0,0),
		inserted_by as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 22) ~> executePositionReceiptRecipientStatusDeleteDB
markRecordPositionReceiptTransferToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		fk_position_receipt as decimal(0,0),
		fk_position_transfer as decimal(0,0),
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['fk_position_receipt','fk_position_transfer'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 23) ~> executePositionReceiptTransferDeleteDB
markRecordPositionTransferToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		notice_id as string,
		creditor_reference_id as string,
		pa_fiscal_code as string,
		pa_fiscal_code_secondary as string,
		iban as string,
		amount as float,
		remittance_information as string,
		transfer_category as string,
		transfer_identifier as string,
		valid as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		fk_payment_plan as decimal(0,0),
		fk_position_payment as decimal(0,0),
		inserted_by as string,
		updated_by as string,
		metadata as string,
		req_tipo_bollo as string,
		req_hash_documento as string,
		req_provincia_residenza as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 24) ~> executePositionTransferDeleteDB
markRecordPositionReceiptRecipientToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		pa_fiscal_code as string,
		notice_id as string,
		creditor_reference_id as string,
		payment_token as string,
		recipient_pa_fiscal_code as string,
		recipient_broker_pa_id as string,
		recipient_station_id as string,
		status as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		fk_position_receipt as decimal(0,0),
		fk_receipt_xml as decimal(0,0),
		inserted_by as string,
		updated_by as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 25) ~> executePositionReceiptRecipientDeleteDB
markRecordPositionReceiptXmlToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		pa_fiscal_code as string,
		notice_id as string,
		creditor_reference_id as string,
		payment_token as string,
		xml as binary,
		inserted_timestamp as timestamp,
		fk_position_receipt as decimal(0,0),
		recipient_pa_fiscal_code as string,
		recipient_broker_pa_id as string,
		recipient_station_id as string,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 26) ~> executePositionReceiptXmlDeleteDB
markRecordPositionReceiptToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		receipt_id as string,
		notice_id as string,
		pa_fiscal_code as string,
		creditor_reference_id as string,
		payment_token as string,
		outcome as string,
		payment_amount as decimal(0,0),
		description as string,
		company_name as string,
		office_name as string,
		debtor_id as decimal(0,0),
		psp_id as string,
		psp_fiscal_code as string,
		psp_vat_number as string,
		psp_company_name as string,
		channel_id as string,
		channel_description as string,
		payer_id as decimal(0,0),
		payment_method as string,
		fee as decimal(0,0),
		payment_date_time as timestamp,
		application_date as date,
		transfer_date as date,
		metadata as string,
		rt_id as decimal(0,0),
		fk_position_payment as decimal(0,0),
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string,
		fee_pa as decimal(0,0),
		bundle_id as string,
		bundle_pa_id as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 27) ~> executePositionReceiptDeleteDB
markRecordTokenUtilityToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		pa_fiscal_code as string,
		notice_id as string,
		creditor_reference_id as string,
		token1 as string,
		token2 as string,
		fk_payment1 as decimal(0,0),
		fk_payment2 as decimal(0,0),
		fk_rpt1 as decimal(0,0),
		fk_rpt2 as decimal(0,0),
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string,
		inserted_timestamp as timestamp
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 28) ~> executeTokenUtilityDeleteDB
markRecordPositionPaymentToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		pa_fiscal_code as string,
		notice_id as string,
		creditor_reference_id as string,
		payment_token as string,
		broker_pa_id as string,
		station_id as string,
		station_version as decimal(0,0),
		psp_id as string,
		broker_psp_id as string,
		channel_id as string,
		idempotency_key as string,
		amount as decimal(0,0),
		fee as decimal(0,0),
		outcome as string,
		payment_method as string,
		payment_channel as string,
		transfer_date as date,
		payer_id as decimal(0,0),
		application_date as date,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		fk_payment_plan as decimal(0,0),
		rpt_id as decimal(0,0),
		payment_type as string,
		carrello_id as decimal(0,0),
		original_payment_token as string,
		flag_io as string,
		ricevuta_pm as string,
		flag_activate_resp_missing as string,
		flag_paypal as string,
		inserted_by as string,
		updated_by as string,
		transaction_id as string,
		close_version as string,
		fee_pa as decimal(0,0),
		bundle_id as string,
		bundle_pa_id as string,
		pm_info as binary,
		mbd as string,
		fee_spo as decimal(19,0)
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 29) ~> executePositionPaymentDeleteDB
markRecordPositionPaymentPlanToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		pa_fiscal_code as string,
		notice_id as string,
		creditor_reference_id as string,
		due_date as timestamp,
		retention_date as timestamp,
		amount as decimal(0,0),
		flag_final_payment as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		metadata as string,
		fk_position_service as decimal(0,0),
		inserted_by as string,
		updated_by as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 30) ~> executePositionPaymentPlanDeleteDB
markRecordPositionStatusToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		pa_fiscal_code as string,
		notice_id as string,
		status as string,
		inserted_timestamp as timestamp,
		inserted_by as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 31) ~> executePositionStatusDeleteDB
markRecordPositionStatusSnapshotToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		pa_fiscal_code as string,
		notice_id as string,
		status as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		fk_position_service as decimal(0,0),
		activation_pending as string,
		inserted_by as string,
		updated_by as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 32) ~> executePositionStatusSnapshotDeleteDB
markRecordPositionServiceToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		pa_fiscal_code as string,
		notice_id as string,
		description as string,
		company_name as string,
		office_name as string,
		debtor_id as decimal(0,0),
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 33) ~> executePositionServiceDeleteDB
markRecordPositionSubjectToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		subject_type as string,
		entity_unique_identifier_type as string,
		entity_unique_identifier_value as string,
		full_name as string,
		street_name as string,
		civic_number as string,
		postal_code as string,
		city as string,
		state_province_region as string,
		country as string,
		email as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 34) ~> executePositionSubjectDeleteDB
markRecordPositionTransferMbdToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		fk_position_transfer as decimal(19,0),
		tipo_bollo as string,
		tipo_allegato_ricevuta as string,
		iubd as string,
		importo as decimal(19,0),
		ora_acquisto as timestamp,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string,
		xml_content as binary
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 35) ~> executePositionTransferMbdDeleteDB
markRecordRtToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		id_sessione as string,
		ccp as string,
		ident_dominio as string,
		iuv as string,
		cod_esito as decimal(19,0),
		esito as string,
		data_ricevuta as timestamp,
		data_richiesta as timestamp,
		id_ricevuta as string,
		id_richiesta as string,
		somma_versamenti as float,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		canale as string,
		notifica_processata as string,
		generata_da as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 36) ~> executeRtDeleteDB
markRecordRptToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		id_sessione as string,
		ccp as string,
		ident_dominio as string,
		iuv as string,
		bic_addebito as string,
		data_msg_rich as timestamp,
		flag_canc as string,
		iban_addebito as string,
		id_msg_rich as string,
		staz_intermediariopa as string,
		intermediariopa as string,
		canale as string,
		psp as string,
		intermediariopsp as string,
		tipo_versamento as string,
		num_versamenti as decimal(19,0),
		rt_signature_code as decimal(19,0),
		somma_versamenti as float,
		parametri_profilo_pagamento as string,
		fk_carrello as decimal(19,0),
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		ricevuta_pm as string,
		wisp_2 as string,
		flag_seconda as string,
		flag_io as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 37) ~> executeRptDeleteDB
markRecordCarrelloToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		id_sessione as string,
		data_msg_rich as timestamp,
		id_carrello as string,
		staz_intermediariopa as string,
		intermediariopa as string,
		canale as string,
		psp as string,
		intermediariopsp as string,
		tipo_versamento as string,
		parametri_profilo_pagamento as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		codice_convenzione as string,
		flag_multibeneficiario as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 38) ~> executeCarrelloDeleteDB
markRecordRetryRptNotificaCancellazioneToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		id_sessione as string,
		id_sessione_originale as string,
		id_carrello as string,
		id_canale as string,
		id_stazione as string,
		id_dominio as string,
		iuv as string,
		ccp as string,
		stato as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string,
		retry as decimal(19,0)
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 39) ~> executeRetryRptNotificaCancellazioneDeleteDB
markRecordRetryRptToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		id_sessione as string,
		id_carrello as string,
		id_canale as string,
		id_dominio as string,
		iuv as string,
		ccp as string,
		stato as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string,
		retry as decimal(19,0),
		id_sessione_originale as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 40) ~> executeRetryRptDeleteDB
markRecordRetryPaAttivaRptToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		pa_fiscal_code as string,
		iuv as string,
		token as string,
		retry as decimal(19,0),
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		ready as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 41) ~> executeRetryPaAttivaRptDeleteDB
markRecordRetryPspNotificaCancellazioneRptToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		id_sessione as string,
		id_sessione_originale as string,
		id_carrello as string,
		id_canale as string,
		id_stazione as string,
		id_dominio as string,
		iuv as string,
		ccp as string,
		stato as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string,
		retry as decimal(19,0)
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 42) ~> executeRetryPspNotificaCancellazioneRptDeleteDB
markRecordRetryPspAckToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		id_sessione as string,
		id_canale as string,
		id_dominio as string,
		iuv as string,
		ccp as string,
		stato as string,
		psp as string,
		inserted_timestamp as timestamp,
		inserted_by as string,
		updated_timestamp as timestamp,
		updated_by as string,
		retry as decimal(19,0),
		identificativo_messaggio_ricevuta_rt as string,
		data_ora_messaggio_ricevuta_rt as timestamp,
		stato_messaggio_rt as string,
		motivazione_messaggio_rt as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 43) ~> executeRetryPspAckDeleteDB
markRecordRetryPaInviaRtToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		id_sessione as string,
		id_stazione as string,
		id_intermediario_pa as string,
		id_canale as string,
		id_sessione_originale as string,
		id_dominio as string,
		iuv as string,
		ccp as string,
		stato as string,
		inserted_timestamp as timestamp,
		inserted_by as string,
		updated_timestamp as timestamp,
		updated_by as string,
		retry as decimal(19,0),
		stato_rpt as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 44) ~> executeRetryPaInviaRtDeleteDB
markRecordPositionRetrySendpaymentresultToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		payment_token as string,
		id_dominio as string,
		iuv as string,
		ccp as string,
		notice_id as string,
		creditor_reference_id as string,
		psp_transaction_id as string,
		psp_id as string,
		stazione as string,
		canale as string,
		id_sessione_originale as string,
		outcome as string,
		retry as decimal(5,0),
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string,
		version as string,
		request as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 45) ~> executePositionRetrySendpaymentresultDeleteDB
markRecordPositionRetryPspSendPaymentToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		pa_fiscal_code as string,
		iuv as string,
		id_psp as string,
		id_broker_psp as string,
		id_channel as string,
		payment_token as string,
		fk_position_payment as decimal(0,0),
		fk_messaggi as decimal(0,0),
		retry as decimal(0,0),
		status as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 46) ~> executePositionRetryPspSendPaymentDeleteDB
markRecordPositionRetryPaSendRtToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		pa_fiscal_code as string,
		notice_id as string,
		token as string,
		fk_recipient as decimal(0,0),
		retry as decimal(19,0),
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 47) ~> executePositionRetryPaSendRtDeleteDB
markRecordRegistroChiamateNotificaRtToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		data as timestamp,
		esito as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 48) ~> executeRegistroChiamateNotificaRtDeleteDB
markRecordVerificaBollettinoToDelete sink(allowSchemaDrift: false,
	validateSchema: false,
	input(
		id as decimal(0,0),
		ccpost as string,
		notice_id as string,
		pa_fiscal_code as string,
		inserted_timestamp as timestamp,
		updated_timestamp as timestamp,
		inserted_by as string,
		updated_by as string
	),
	deletable:true,
	insertable:false,
	updateable:false,
	upsertable:false,
	keys:['id'],
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 49) ~> executeVerificaBollettinoDeleteDB
