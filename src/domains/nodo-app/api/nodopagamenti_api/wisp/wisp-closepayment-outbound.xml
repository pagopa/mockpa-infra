<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <base />
        <set-variable name="request-body" value="@(context.Request.Body.As<JObject>(preserveContent: true))" />
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
        <set-variable name="enable_wisp_dismantling_switch" value="{{enable-wisp-dismantling-switch}}" />
        <!-- <set-variable name="status_code" value="@(context.Response.StatusCode)" /> -->
        <set-variable name="status_code" value="@((int) 200)" />
        <choose>
            <when condition="@(context.Variables.GetValueOrDefault<string>("enable_wisp_dismantling_switch", "").Equals("true") && context.Variables.GetValueOrDefault<int>("status_code", 0).Equals(200))">
            <!-- check if outcome in request is KO -->
            <set-variable name="is_outcome_ko" value="@{
                    try {
                        JObject requestBody = (JObject) context.Variables["request-body"];
                        return ((string) requestBody["outcome"]).ToUpper();
                    } catch (Exception e) {
                        return "NONE";
                    }
                }" />
            <choose>
                <when condition="@(context.Variables.GetValueOrDefault<string>("is_outcome_ko", "NONE").Equals("KO"))">
                <set-variable name="wisp_payment_tokens" value="@{
                            JObject request = (JObject) context.Variables["request-body"];
                            JArray paymentsTokens = (JArray) request.Property("paymentTokens").Value;
                            return string.Join(",", paymentsTokens.Select(token => token.ToString()));
                }" />
                <!-- check if payments are cached for WISP dismantling, searching by the key in format wisp_<paymentToken>_<noticeNumber> -->
                <!-- If the key extracted from key object refers to a WISP dismantling payment, send a KO RT -->
                <include-fragment fragment-id="wisp-dismantling-sendrt" />
            </when>
        </choose>
    </when>
</choose>
        </outbound>
<on-error>
<base />
</on-error>
        </policies>
