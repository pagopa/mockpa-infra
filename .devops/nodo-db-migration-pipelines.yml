pr: none
trigger: none
#trigger:
#  - develop

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: k8sEnv
    displayName: K8s Environment
    type: string
    default: dev
    values:
      - dev
      - uat
      - prd
  - name: dbVersion
    displayName: Database Version
    type: string
  - name: lbContexts
    displayName: Liquibase Contexts
    type: string
    default: '_'
  - name: lbLogLevel
    displayName: Liquibase Log Level
    type: string
    default: INFO
    values:
      - INFO
      - FINE
      - WARNING
      - SEVERE

variables:
  ${{ if eq(parameters.k8sEnv, 'dev') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_DEV_AZURE_SERVICE_CONNECTION)'
    JDBC_URL: jdbc:postgresql://pagopa-d-weu-nodo-flexible-postgresql.postgres.database.azure.com:5432/nodo?sslmode=require
    KEY_VAULT_NAME: pagopa-d-nodo-kv
  ${{ elseif eq(parameters.k8sEnv, 'uat') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_UAT_AZURE_SERVICE_CONNECTION)'
    JDBC_URL: jdbc:postgresql://pagopa-u-weu-nodo-flexible-postgresql.postgres.database.azure.com:5432/nodo?sslmode=require
    KEY_VAULT_NAME: pagopa-u-nodo-kv
  ${{ elseif eq(parameters.k8sEnv, 'prd') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_PROD_AZURE_SERVICE_CONNECTION)'
    JDBC_URL: jdbc:postgresql://pagopa-p-weu-nodo-flexible-postgresql.postgres.database.azure.com:5432/nodo?sslmode=require
    KEY_VAULT_NAME: pagopa-p-nodo-kv
  CFG_USERNAME: cfg
  CFG_SCHEMA: cfg
  OFFLINE_USERNAME: offline
  OFFLINE_SCHEMA: offline
  ONLINE_USERNAME: online
  ONLINE_SCHEMA: online
  RE_USERNAME: re
  RE_SCHEMA: re
  WFESP_USERNAME: wfesp
  WFESP_SCHEMA: wfesp

stages:
  - stage: prd_approval
    pool: server
    displayName: "Manual approval for prod only"
    condition: eq('${{ parameters.k8sEnv }}', 'prd')
    jobs:
      - job: prd_approval
        pool: server
        condition: eq('${{ parameters.k8sEnv }}', 'prd')
        displayName: "Approval"
        timeoutInMinutes: 6
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 5
            inputs:
              notifyUsers: |
                $(monitor-notification-email)
                $(monitor-notification-slack-email)
              instructions: 'Running in PROD,continue?'
              onTimeout: 'reject'
  - stage: db_migration
    displayName: "DB Migration"
    condition: or(eq('${{ parameters.k8sEnv }}', 'dev'),eq('${{ parameters.k8sEnv }}', 'uat'),not(failed('prd_approval')))
    jobs:
      - job: initialization
        displayName: "Update nodo DB ${{ parameters.k8sEnv }}"
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
          - script: |
              cd $(Pipeline.Workspace)
              mkdir liquibase-app
              wget -c https://github.com/liquibase/liquibase/releases/download/v4.17.1/liquibase-4.17.1.tar.gz
              tar -xzf liquibase-4.17.1.tar.gz -C liquibase-app
              rm -rf liquibase-4.17.1.tar.gz
              ls -la liquibase-app
              echo "##vso[task.prependpath]$(Pipeline.Workspace)/liquibase-app"
            displayName: "Install Liquibase"
          - task: AzureKeyVault@2
            displayName: "Get $(KEY_VAULT_NAME) secrets"
            inputs:
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              keyVaultName: $(KEY_VAULT_NAME)
              secretsFilter: 'monitor-notification-email,monitor-notification-slack-email,db-cfg-password,db-online-password,db-offline-password,db-re-password,db-wfesp-password'
              runAsPreJob: true
          - script: |
              liquibase \
              --url=$(JDBC_URL) \
              --username=$(CFG_USERNAME) \
              --password=$(db-cfg-password) \
              --classpath=src/psql/nodo/liquibase/changelog/cfg \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName=$(CFG_SCHEMA) \
              --defaultSchemaName=$(CFG_SCHEMA) \
              --contexts=${{ parameters.lbContexts }} \
              --log-level=${{ parameters.lbLogLevel }} \
              update -Dschema=$(CFG_SCHEMA)
            displayName: "Run Liquibase cfg"
          - script: |
              liquibase \
              --url=$(JDBC_URL) \
              --username=$(CFG_USERNAME) \
              --password=$(db-cfg-password) \
              --classpath=src/psql/nodo/liquibase/changelog/cfg \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName=$(CFG_SCHEMA) \
              --defaultSchemaName=$(CFG_SCHEMA) \
              --contexts=${{ parameters.lbContexts }} \
              --log-level=${{ parameters.lbLogLevel }} \
              tag ${{ parameters.dbVersion }}
            displayName: "Tag cfg"
          - script: |
              liquibase \
              --url=$(JDBC_URL) \
              --username=$(ONLINE_USERNAME) \
              --password=$(db-online-password) \
              --classpath=src/psql/nodo/liquibase/changelog/online \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName=$(ONLINE_SCHEMA) \
              --defaultSchemaName=$(ONLINE_SCHEMA) \
              --contexts=${{ parameters.lbContexts }} \
              --log-level=${{ parameters.lbLogLevel }} \
              update -Dschema=$(ONLINE_SCHEMA) -DschemaOffline=$(OFFLINE_SCHEMA) -DusernameOffline=$(OFFLINE_USERNAME)
            displayName: "Run Liquibase online"
          - script: |
              liquibase \
              --url=$(JDBC_URL) \
              --username=$(ONLINE_USERNAME) \
              --password=$(db-online-password) \
              --classpath=src/psql/nodo/liquibase/changelog/online \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName=$(ONLINE_SCHEMA) \
              --defaultSchemaName=$(ONLINE_SCHEMA) \
              --contexts=${{ parameters.lbContexts }} \
              --log-level=${{ parameters.lbLogLevel }} \
              tag ${{ parameters.dbVersion }}
            displayName: "Tag online"
          - script: |
              liquibase \
              --url=$(JDBC_URL) \
              --username=$(OFFLINE_USERNAME) \
              --password=$(db-offline-password) \
              --classpath=src/psql/nodo/liquibase/changelog/offline \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName=$(OFFLINE_SCHEMA) \
              --defaultSchemaName=$(OFFLINE_SCHEMA) \
              --contexts=${{ parameters.lbContexts }} \
              --log-level=${{ parameters.lbLogLevel }} \
              update -Dschema=$(OFFLINE_SCHEMA) -DschemaOnline=$(ONLINE_SCHEMA)
            displayName: "Run Liquibase offline"
          - script: |
              liquibase \
              --url=$(JDBC_URL) \
              --username=$(OFFLINE_USERNAME) \
              --password=$(db-offline-password) \
              --classpath=src/psql/nodo/liquibase/changelog/offline \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName=$(OFFLINE_SCHEMA) \
              --defaultSchemaName=$(OFFLINE_SCHEMA) \
              --contexts=${{ parameters.lbContexts }} \
              --log-level=${{ parameters.lbLogLevel }} \
              tag ${{ parameters.dbVersion }}
            displayName: "Tag offline"
          - script: |
              liquibase \
              --url=$(JDBC_URL) \
              --username=$(RE_USERNAME) \
              --password=$(db-re-password) \
              --classpath=src/psql/nodo/liquibase/changelog/re \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName=$(RE_SCHEMA) \
              --defaultSchemaName=$(RE_SCHEMA) \
              --contexts=${{ parameters.lbContexts }} \
              --log-level=${{ parameters.lbLogLevel }} \
              update -Dschema=$(RE_SCHEMA)
            displayName: "Run Liquibase re"
          - script: |
              liquibase \
              --url=$(JDBC_URL) \
              --username=$(RE_USERNAME) \
              --password=$(db-re-password) \
              --classpath=src/psql/nodo/liquibase/changelog/re \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName=$(RE_SCHEMA) \
              --defaultSchemaName=$(RE_SCHEMA) \
              --contexts=${{ parameters.lbContexts }} \
              --log-level=${{ parameters.lbLogLevel }} \
              tag ${{ parameters.dbVersion }}
            displayName: "Tag re"
          - script: |
              liquibase \
              --url=$(JDBC_URL) \
              --username=$(WFESP_USERNAME) \
              --password=$(db-wfesp-password) \
              --classpath=src/psql/nodo/liquibase/changelog/wfesp \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName=$(WFESP_SCHEMA) \
              --defaultSchemaName=$(WFESP_SCHEMA) \
              --contexts=${{ parameters.lbContexts }} \
              --log-level=${{ parameters.lbLogLevel }} \
              update -Dschema=$(WFESP_SCHEMA)
            displayName: "Run Liquibase wfesp"
          - script: |
              liquibase \
              --url=$(JDBC_URL) \
              --username=$(WFESP_USERNAME) \
              --password=$(db-wfesp-password) \
              --classpath=src/psql/nodo/liquibase/changelog/wfesp \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName=$(WFESP_SCHEMA) \
              --defaultSchemaName=$(WFESP_SCHEMA) \
              --contexts=${{ parameters.lbContexts }} \
              --log-level=${{ parameters.lbLogLevel }} \
              tag ${{ parameters.dbVersion }}
            displayName: "Tag wfesp"
