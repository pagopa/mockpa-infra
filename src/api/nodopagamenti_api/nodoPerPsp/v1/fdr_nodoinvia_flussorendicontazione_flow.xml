<policies>
    <inbound>
        <!-- Initialize context variables with property values. -->
        <!-- <set-variable name="storageAccount" value="pagopaunodotestsa" />
        <set-variable name="x-request-body" value="@(context.Request.Body.As<string>(preserveContent: true))" />
        <set-variable name="x-request-body-length" value="@{
            return (string)context.Request.Headers.GetValueOrDefault("Content-Length","0");
        }" /> -->
        <set-variable name="readrequest" value="@(context.Request.Body.As<string>(preserveContent: true))" />
        <set-variable name="identificativoPSP" value="@{
            var dom2parse = ((string) context.Variables["readrequest"]);
            String[] spearator = {"identificativoPSP"};
            String[] result = dom2parse.Split(spearator, StringSplitOptions.RemoveEmptyEntries);
            var identificativoPSP = result[1].Substring(1,result[1].Length-3);
            return identificativoPSP;
        }" />
        <set-variable name="identificativoFlusso" value="@{
            var dom2parse = ((string) context.Variables["readrequest"]);
            String[] spearator = {"identificativoFlusso"};
            String[] result = dom2parse.Split(spearator, StringSplitOptions.RemoveEmptyEntries);
            var identificativoFlusso = result[1].Substring(1,result[1].Length-3);
            return identificativoFlusso;
        }" />
        <set-variable name="dataOraFlusso" value="@{
            var dom2parse = ((string) context.Variables["readrequest"]);
            String[] spearator = {"dataOraFlusso"};
            String[] result = dom2parse.Split(spearator, StringSplitOptions.RemoveEmptyEntries);
            var dataOraFlusso = result[1].Substring(1,result[1].Length-3);
            return dataOraFlusso;
        }" />
        <set-variable name="xmlRendicontazione" value="@{
            var dom2parse = ((string) context.Variables["readrequest"]);
            String[] spearator = {"xmlRendicontazione"};
            String[] result = dom2parse.Split(spearator, StringSplitOptions.RemoveEmptyEntries);
            var xmlRendicontazione = result[1].Substring(1,result[1].Length-3);
            return xmlRendicontazione;
        }" />
        <cache-store-value key="@{
            var fdrFileName=(string) context.Variables["identificativoPSP"]+"_"+context.Variables["identificativoFlusso"]+"_"+context.Variables["dataOraFlusso"];
            return fdrFileName;
        }" value="@((string) context.Variables["xmlRendicontazione"])" duration="3600" caching-type="internal" />
        <base />
        <set-backend-service base-url="{{urlnodo}}" />
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <cache-lookup-value key="@{
                var fdrFileName=(string) context.Variables["identificativoPSP"]+"_"+context.Variables["identificativoFlusso"]+"_"+context.Variables["dataOraFlusso"];
                return fdrFileName;
            }" variable-name="xmlRendicontazione" caching-type="internal" />
        <choose>
            <when condition="@(context.Response.StatusCode == 200)">
                <set-variable name="esito" value="@{
                        var response = context.Response.Body.As<String>();
                        String[] spearator = {"esito"};
                        String[] result = response.Split(spearator, StringSplitOptions.RemoveEmptyEntries);
                        var esito = result[1].Substring(1,result[1].Length-3);

                        if (context.Variables.ContainsKey("xmlRendicontazione")) {
                            return (string) context.Variables["xmlRendicontazione"];
                        }

                        return esito;
                    }" />

                    <!--
                <send-request mode="new" response-variable-name="tokenstate" timeout="2" ignore-error="true">
                    <set-url>@{
                        return string.Format("https://{0}.file.core.windows.net/flussi/prova.xml?SAStoken",(string)context.Variables["storageAccount"]);
                    }</set-url>
                    <set-method>PUT</set-method>
                    <set-header name="x-ms-blob-type" exists-action="override">
                        <value>BlockBlob</value>
                    </set-header>
                    <set-header name="x-ms-type" exists-action="override">
                        <value>file</value>
                    </set-header>
                    <set-header name="x-ms-file-permission" exists-action="override">
                        <value>inherit</value>
                    </set-header>
                    <set-header name="x-ms-file-attributes" exists-action="override">
                        <value>none</value>
                    </set-header>
                    <set-header name="x-ms-file-creation-time" exists-action="override">
                        <value>now</value>
                    </set-header>
                    <set-header name="x-ms-file-last-write-time" exists-action="override">
                        <value>now</value>
                    </set-header>
                    <set-header name="x-ms-content-length" exists-action="override">
                        <value>65336</value>
                    </set-header>
                </send-request>
                    -->
        <!-- First get the auth token with managed-identity from the storage account and save it on a output token -->
        <authentication-managed-identity resource="https://storage.azure.com/" output-token-variable-name="msi-access-token" ignore-error="false" />

        <!-- Send the PUT request with metadata -->
        <send-request mode="new" response-variable-name="result" timeout="300" ignore-error="false">
            <!-- Get variables to configure your: storageaccount, destination container and file name with extension -->
            <set-url>@{ return "https://pagopaunodotestsa.blob.core.windows.net/" + "flussi" + "/" + "prova.xml"; }</set-url>
            <set-method>PUT</set-method>
            <set-header name="Host" exists-action="override">
                <value>pagopaunodotestsa.blob.core.windows.net</value>
            </set-header>
            <set-header name="X-Ms-Blob-Type" exists-action="override">
                <value>BlockBlob</value>
            </set-header>
            <set-header name="X-Ms-Blob-Cache-Control" exists-action="override">
                <value />
            </set-header>
            <set-header name="X-Ms-Blob-Content-Disposition" exists-action="override">
                <value />
            </set-header>
            <set-header name="X-Ms-Blob-Content-Encoding" exists-action="override">
                <value />
            </set-header>
            <set-header name="X-Ms-Blob-Content-Language" exists-action="override">
                <value />
            </set-header>
            <set-header name="X-Ms-Version" exists-action="override">
                <value>2019-12-12</value>
            </set-header>
            <set-header name="Accept" exists-action="override">
                <value>application/json</value>
            </set-header>
            <!-- Set the header with authorization bearer token that was previously requested -->
            <set-header name="Authorization" exists-action="override">
                <value>@("Bearer " + (string)context.Variables["msi-access-token"])</value>
            </set-header>
            <!-- Set the file content from the original request body data -->
            <set-body>@(context.Request.Body.As<string>())</set-body>
        </send-request>

            </when>
        </choose>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>
