<!--
    IMPORTANT:
    - Policy fragment are included as-is whenever they are referenced.
    - If using variables. Ensure they are setup before use.
    - Copy and paste your code here or simply start coding
-->
<fragment>
    <!-- check if payments are cached for WISP dismantling, searching by the key in format wisp_<paymentToken> -->
    <!-- If the key extracted from key object refers to a WISP dismantling payment, send a KO RT -->
    <!-- ############################## -->
    <!-- Number of token evaluated: 1/5 -->
    <!-- ############################## -->
    <set-variable name="current_payment_token" value="@{
        try {
            return ((string) context.Variables["wisp_payment_tokens"]).Split(',')[0];
        } catch (Exception e) {
            return "NONE";
        }
    }" />
    <choose>
        <!-- Continue only if passed object is not equals to 'NONE' -->
        <when condition="@(!((string) context.Variables["current_payment_token"]).Equals("NONE"))">
        <!-- generate key in format key_<paymentToken> and use it to search in cache -->
        <cache-lookup-value key="@("wisp_" + (string) context.Variables["current_payment_token"])" default-value="NONE" variable-name="payment_mapping" caching-type="external" />
        <!-- if the payments was executed by WISP dismantling, execute a call to 'receipt/ko' API with paymentToken, identificativoDominio and identificativoUnivocoVersamento -->
        <choose>
            <when condition="@(!((string) context.Variables["payment_mapping"]).Equals("NONE"))">
            <send-one-way-request timeout="1" mode="new">
                <set-url>{{wisp-dismantling-converter-base-url}}/receipts/ko</set-url>
                <set-method>POST</set-method>
                <set-header name="Content-Type" exists-action="override">
                    <value>application/json</value>
                </set-header>
                <set-body>
                    @{ return (string) context.Variables["payment_mapping"]; }
                </set-body>
            </send-one-way-request>
        </when>
    </choose>
</when>
        </choose>
        <!-- ############################## -->
        <!-- Number of token evaluated: 2/5 -->
        <!-- ############################## -->
<set-variable name="current_payment_token" value="@{
        try {
            return ((string) context.Variables["wisp_payment_tokens"]).Split(',')[1];
        } catch (Exception e) {
            return "NONE";
        }
    }" />
<choose>
<!-- Continue only if passed object is not equals to 'NONE' -->
<when condition="@(!((string) context.Variables["current_payment_token"]).Equals("NONE"))">
<!-- generate key in format key_<paymentToken> and use it to search in cache -->
<cache-lookup-value key="@("wisp_" + (string) context.Variables["current_payment_token"])" default-value="NONE" variable-name="payment_mapping" caching-type="external" />
<!-- if the payments was executed by WISP dismantling, execute a call to 'receipt/ko' API with paymentToken, identificativoDominio and identificativoUnivocoVersamento -->
<choose>
    <when condition="@(!((string) context.Variables["payment_mapping"]).Equals("NONE"))">
    <send-one-way-request timeout="1" mode="new">
        <set-url>{{wisp-dismantling-converter-base-url}}/receipts/ko</set-url>
        <set-method>POST</set-method>
        <set-header name="Content-Type" exists-action="override">
            <value>application/json</value>
        </set-header>
        <set-body>
            @{ return (string) context.Variables["payment_mapping"]; }
        </set-body>
    </send-one-way-request>
</when>
</choose>
        </when>
        </choose>
        <!-- ############################## -->
        <!-- Number of token evaluated: 3/5 -->
        <!-- ############################## -->
<set-variable name="current_payment_token" value="@{
        try {
            return ((string) context.Variables["wisp_payment_tokens"]).Split(',')[2];
        } catch (Exception e) {
            return "NONE";
        }
    }" />
<choose>
<!-- Continue only if passed object is not equals to 'NONE' -->
<when condition="@(!((string) context.Variables["current_payment_token"]).Equals("NONE"))">
<!-- generate key in format key_<paymentToken> and use it to search in cache -->
<cache-lookup-value key="@("wisp_" + (string) context.Variables["current_payment_token"])" default-value="NONE" variable-name="payment_mapping" caching-type="external" />
<!-- if the payments was executed by WISP dismantling, execute a call to 'receipt/ko' API with paymentToken, identificativoDominio and identificativoUnivocoVersamento -->
<choose>
    <when condition="@(!((string) context.Variables["payment_mapping"]).Equals("NONE"))">
    <send-one-way-request timeout="1" mode="new">
        <set-url>{{wisp-dismantling-converter-base-url}}/receipts/ko</set-url>
        <set-method>POST</set-method>
        <set-header name="Content-Type" exists-action="override">
            <value>application/json</value>
        </set-header>
        <set-body>
            @{ return (string) context.Variables["payment_mapping"]; }
        </set-body>
    </send-one-way-request>
</when>
</choose>
        </when>
        </choose>
        <!-- ############################## -->
        <!-- Number of token evaluated: 4/5 -->
        <!-- ############################## -->
<set-variable name="current_payment_token" value="@{
        try {
            return ((string) context.Variables["wisp_payment_tokens"]).Split(',')[3];
        } catch (Exception e) {
            return "NONE";
        }
    }" />
<choose>
<!-- Continue only if passed object is not equals to 'NONE' -->
<when condition="@(!((string) context.Variables["current_payment_token"]).Equals("NONE"))">
<!-- generate key in format key_<paymentToken> and use it to search in cache -->
<cache-lookup-value key="@("wisp_" + (string) context.Variables["current_payment_token"])" default-value="NONE" variable-name="payment_mapping" caching-type="external" />
<!-- if the payments was executed by WISP dismantling, execute a call to 'receipt/ko' API with paymentToken, identificativoDominio and identificativoUnivocoVersamento -->
<choose>
    <when condition="@(!((string) context.Variables["payment_mapping"]).Equals("NONE"))">
    <send-one-way-request timeout="1" mode="new">
        <set-url>{{wisp-dismantling-converter-base-url}}/receipts/ko</set-url>
        <set-method>POST</set-method>
        <set-header name="Content-Type" exists-action="override">
            <value>application/json</value>
        </set-header>
        <set-body>
            @{ return (string) context.Variables["payment_mapping"]; }
        </set-body>
    </send-one-way-request>
</when>
</choose>
        </when>
        </choose>
        <!-- ############################## -->
        <!-- Number of token evaluated: 5/5 -->
        <!-- ############################## -->
<set-variable name="current_payment_token" value="@{
        try {
            return ((string) context.Variables["wisp_payment_tokens"]).Split(',')[4];
        } catch (Exception e) {
            return "NONE";
        }
    }" />
<choose>
<!-- Continue only if passed object is not equals to 'NONE' -->
<when condition="@(!((string) context.Variables["current_payment_token"]).Equals("NONE"))">
<!-- generate key in format key_<paymentToken> and use it to search in cache -->
<cache-lookup-value key="@("wisp_" + (string) context.Variables["current_payment_token"])" default-value="NONE" variable-name="payment_mapping" caching-type="external" />
<!-- if the payments was executed by WISP dismantling, execute a call to 'receipt/ko' API with paymentToken, identificativoDominio and identificativoUnivocoVersamento -->
<choose>
    <when condition="@(!((string) context.Variables["payment_mapping"]).Equals("NONE"))">
    <send-one-way-request timeout="1" mode="new">
        <set-url>{{wisp-dismantling-converter-base-url}}/receipts/ko</set-url>
        <set-method>POST</set-method>
        <set-header name="Content-Type" exists-action="override">
            <value>application/json</value>
        </set-header>
        <set-body>
            @{ return (string) context.Variables["payment_mapping"]; }
        </set-body>
    </send-one-way-request>
</when>
</choose>
        </when>
        </choose>
        </fragment>