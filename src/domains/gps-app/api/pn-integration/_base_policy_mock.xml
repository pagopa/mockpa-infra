<!--
    - Policies are applied in the order they appear.
    - Position <base/> inside a section to inherit policies from the outer scope.
    - Comments within policies are not preserved.
-->
<!-- Add policies as children to the <inbound>, <outbound>, <backend>, and <on-error> elements -->
<policies>
    <!-- Throttle, authorize, validate, cache, or transform the requests -->
    <inbound>
        <base />
        <set-variable name="isMock" value="@(context.Request.Headers.GetValueOrDefault("Ocp-Apim-Subscription-Key","").Equals("{{afm-pn-sub-key-test}}"))" />
        <choose>
            <when condition="@(context.Variables.GetValueOrDefault<bool>("isMock"))">
                <!--Mock Responses-->
                <choose>
                    <when condition="@(context.Request.Url.Path.Contains("/notificationfee"))">
                        <set-variable name="api" value="update" />
                    </when>
                    <otherwise>
                        <set-variable name="api" value="get" />
                    </otherwise>
                </choose>
                <set-variable name="nav" value="@(context.Request.MatchedParameters["nav"])" />
                <choose>
                    <!-- update notification fee API -->
                    <when condition="@(context.Variables.GetValueOrDefault<string>("api").Equals("update") && context.Variables.GetValueOrDefault<string>("nav").StartsWith("302011"))">
                        <return-response>
                            <set-status code="200" />
                            <set-header name="Content-Type" exists-action="override">
                                <value>application/json</value>
                            </set-header>
                            <set-header name="X-Scenario-Id" exists-action="override">
                                <value>mocked update notification fee</value>
                            </set-header>
                            <set-body>@{

                                string currentDate = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss.fff").ToString();
                                string nav = context.Request.MatchedParameters["nav"].ToString();
                                string iuv = nav.Substring(1);

                                JObject data = new JObject();
                                data.Add("nav", nav);
                                data.Add("iuv", iuv);
                                data.Add("organizationFiscalCode", context.Request.MatchedParameters["organizationFiscalCode"].ToString());
                                data.Add("amount", 100);
                                data.Add("isPartialPayment", true);
                                data.Add("dueDate", "2024-12-28T22:12:47.989Z");
                                data.Add("retentionDate", "2024-12-31T22:12:47.989Z");
                                data.Add("insertedDate", "2024-09-28T22:12:47.989Z");
                                data.Add("paymentDate", null);
                                data.Add("reportingDate", null);
                                data.Add("paymentMethod", null);
                                data.Add("pspCompany", null);
                                data.Add("idReceipt", null);
                                data.Add("idFlowReporting", null);
                                data.Add("fee", 0);
                                data.Add("notificationFee", context.Request.Body.As<JObject>(true)["notificationFee"].Value<string>());
                                data.Add("status", "PO_UNPAID");
                                data.Add("lastUpdatedDate", currentDate);
                                data.Add("lastUpdatedDateNotificationFee", currentDate);
                                data.Add("paymentOptionMetadata", new JArray());
                                
                                JObject transfer = new JObject();
                                transfer.Add("organizationFiscalCode", context.Request.MatchedParameters["organizationFiscalCode"].ToString()); 
                                transfer.Add("idTransfer", "01");
                                transfer.Add("amount", 100);
                                transfer.Add("remittanceInformation", "test payment");
                                transfer.Add("category", "9/0301100TS/");
                                transfer.Add("iban", "IT12A1234512345123456789012");
                                transfer.Add("postalIban", null);
                                transfer.Add("stamp", null);
                                transfer.Add("insertedDate", "2024-09-28T22:12:47.989Z");
                                transfer.Add("status", "T_UNREPORTED");
                                transfer.Add("lastUpdatedDate", currentDate);
                                transfer.Add("transferMetadata", new JArray());

                                JArray list = new JArray(transfer);
                                data.Add("transfer", list);
                                return data.ToString();
                            }</set-body>
                        </return-response>
                    </when>
                    <!-- get details of a specific payment option API -->
                    <when condition="@(context.Variables.GetValueOrDefault<string>("api").Equals("get") && context.Variables.GetValueOrDefault<string>("nav").StartsWith("302011"))">
                        <return-response>
                            <set-status code="200" />
                            <set-header name="Content-Type" exists-action="override">
                                <value>application/json</value>
                            </set-header>
                            <set-header name="X-Scenario-Id" exists-action="override">
                                <value>mocked get payment option</value>
                            </set-header>
                            <set-body>@{

                                string currentDate = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss.fff").ToString();
                                string nav = context.Request.MatchedParameters["nav"].ToString();
                                string iuv = nav.Substring(1);

                                JObject data = new JObject();
                                data.Add("nav", nav);
                                data.Add("iuv", iuv);
                                data.Add("organizationFiscalCode", context.Request.MatchedParameters["organizationFiscalCode"].ToString());
                                data.Add("amount", 100);
                                data.Add("isPartialPayment", true);
                                data.Add("dueDate", "2024-12-28T22:12:47.989Z");
                                data.Add("retentionDate", "2024-12-31T22:12:47.989Z");
                                data.Add("insertedDate", "2024-09-28T22:12:47.989Z");
                                data.Add("paymentDate", null);
                                data.Add("reportingDate", null);
                                data.Add("paymentMethod", null);
                                data.Add("pspCompany", null);
                                data.Add("idReceipt", null);
                                data.Add("idFlowReporting", null);
                                data.Add("fee", 0);
                                data.Add("notificationFee", 0);
                                data.Add("status", "PO_UNPAID");
                                data.Add("lastUpdatedDate", currentDate);
                                data.Add("lastUpdatedDateNotificationFee", currentDate);
                                data.Add("paymentOptionMetadata", new JArray());
                                data.Add("iupd", "77777777777-64c8e41bfec846e02000000000000010");
                                data.Add("type", "F");
                                data.Add("fiscalCode", "SMNRDN75R05H501F");
                                data.Add("fullName", "Simone Rondinella");
                                data.Add("streetName", null);
                                data.Add("civicNumber", null);
                                data.Add("postalCode", null);
                                data.Add("city", null);
                                data.Add("province", null);
                                data.Add("region", null);
                                data.Add("country", null);
                                data.Add("email", null);
                                data.Add("phone", null);
                                data.Add("companyName", "Piattaforma Notifiche");
                                data.Add("officeName", null);
                                data.Add("debtPositionStatus", "VALID");
                                
                                JObject transfer = new JObject();
                                transfer.Add("organizationFiscalCode", context.Request.MatchedParameters["organizationFiscalCode"].ToString()); 
                                transfer.Add("idTransfer", "01");
                                transfer.Add("amount", 100);
                                transfer.Add("remittanceInformation", "test payment");
                                transfer.Add("category", "9/0301100TS/");
                                transfer.Add("iban", "IT12A1234512345123456789012");
                                transfer.Add("postalIban", null);
                                transfer.Add("stamp", null);
                                transfer.Add("insertedDate", "2024-09-28T22:12:47.989Z");
                                transfer.Add("status", "T_UNREPORTED");
                                transfer.Add("lastUpdatedDate", currentDate);
                                transfer.Add("transferMetadata", new JArray());

                                JArray list = new JArray(transfer);
                                data.Add("transfer", list);
                                return data.ToString();
                            }</set-body>
                        </return-response>
                    </when>
                </choose>
            </when>
        </choose>
    </inbound>
    <!-- Control if and how the requests are forwarded to services  -->
    <backend>
        <base />
    </backend>
    <!-- Customize the responses -->
    <outbound>
        <base />
    </outbound>
    <!-- Handle exceptions and customize error responses  -->
    <on-error>
        <base />
    </on-error>
</policies>