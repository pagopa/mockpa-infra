<policies>
  <inbound>
    <base />
    <set-variable name="domain" value="apicfg_" />
    <!-- database version -->
    <set-variable name="db_version" value="@(context.Api.Path.Substring(context.Api.Path.LastIndexOf('/')).Trim('/'))" />
    <set-variable name="cacheBaseUrl" value="https://${hostname}" />
    <set-variable name="cacheBasePathRegex" value="/stakeholders/(?&apos;stakeholder&apos;.*)/cache/schemas/v1$" />
    <set-variable name="stakeholder" value="@(Regex.Match(context.Operation.UrlTemplate,(string)context.Variables["cacheBasePathRegex"]).Groups["stakeholder"]?.Value)" />
    <set-variable name="cacheBasePath" value="@(String.Concat("/stakeholders/",context.Variables["stakeholder"],"/cache/schemas/v1",context.Request.OriginalUrl.QueryString))" />
    <choose>
      <!-- if request is a specific one -->
      <when condition="@(Regex.Match(context.Operation.UrlTemplate,(string)context.Variables["cacheBasePathRegex"]).Success)">
      <trace source="debug-1" severity="information">Base path regards cache data</trace>
      <set-variable name="canary" value="@{
                      return context.Request.Headers.ContainsKey("X-Canary") == true ? "_canary" : "";
      }" />
      <set-variable name="cache_key" value="@(String.Concat(context.Variables["domain"], context.Variables["db_version"], "_", context.Variables["stakeholder"] ,"_v1", context.Variables["canary"]))" />
      <set-variable name="cache_key_in_progress" value="@(String.Concat(context.Variables["cache_key"], "_in_progress"))" />
      <!-- check if force cache refresh -->
      <choose>
        <when condition="@( System.Boolean.Parse( context.Request.Url.Query.GetValueOrDefault("refresh", "false")) )">
        <!-- execute cache refresh -->
        <cache-lookup-value key="@((string)context.Variables["cache_key_in_progress"])" default-value="false" variable-name="eval_in_progress" caching-type="external" />
        <choose>
          <!-- if cache generation is in progress then return 503 -->
          <when condition="@( System.Boolean.Parse( context.Variables.GetValueOrDefault("eval_in_progress", "false")) )">
            <mock-response status-code="503" content-type="application/json" />
          </when>
        <!-- else generate specific cache -->
        <otherwise>
          <!-- require cache, so call fragment -->
          <trace source="cache-fragment-1" severity="information">Cache evaluation not in progress</trace>
          <include-fragment fragment-id="cache-generation" />
        </otherwise>
      </choose>
    </when>
    <otherwise>
      <trace source="debug-2" severity="information">No refresh is required!</trace>
      <!-- get cache value on Redis-->
      <cache-lookup-value key="@((string)context.Variables["cache_key"])" variable-name="cache-value" caching-type="external" />
      <choose>
        <when condition="@(context.Variables.ContainsKey("cache-value"))">
        <trace source="debug-3" severity="information">Cache exists!</trace>
        <return-response response-variable-name="existing context variable">
          <set-status code="200" reason="OK" />
          <set-header name="Content-Type" exists-action="override">
            <value>application/json</value>
          </set-header>
          <set-header name="Content-Encoding" exists-action="override">
            <value>gzip</value>
          </set-header>
          <set-body>@(((JObject)context.Variables["cache-value"]).ToString())</set-body>
        </return-response>
      </when>
      <otherwise>
        <trace source="debug-4" severity="information">Cache not present -&gt; call backend!</trace>

        <cache-lookup-value key="@((string)context.Variables["cache_key_in_progress"])" default-value="false" variable-name="eval_in_progress" caching-type="external" />
        <!-- require cache, so call fragment -->
        <choose>
          <!-- if cache generation is in progress then return 503 -->
          <when condition="@( System.Boolean.Parse( context.Variables.GetValueOrDefault("eval_in_progress", "false")) )">
            <mock-response status-code="503" content-type="application/json" />
          </when>
          <!-- else generate specific cache -->
          <otherwise>
            <!-- require cache, so call fragment -->
            <trace source="cache-fragment-1" severity="information">Cache evaluation not in progress</trace>
            <include-fragment fragment-id="cache-generation" />
          </otherwise>
        </choose>
      </otherwise>
    </choose>
  </otherwise>
</choose>
  </when>
  <!-- if request is not a specific one -->
<otherwise>
<trace source="debug-5" severity="information">URL not cached, then require to backend</trace>
<set-backend-service base-url="https://${hostname}" />
</otherwise>
  </choose>
  </inbound>
<outbound>
<base />
</outbound>
<backend>
<base />
</backend>
<on-error>
<base />
</on-error>
  </policies>
