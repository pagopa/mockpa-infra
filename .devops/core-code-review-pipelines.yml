pr:
  branches:
    include:
      - main

parameters:
  - name: 'DEV'
    displayName: 'Plan on DEV environment'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'UAT'
    displayName: 'Plan on UAT environment'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'PROD'
    displayName: 'Plan on PROD environment'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'DOMAINS'
    type: object
    default:
      - 'src/core'
      - 'src/aks-platform'
      - 'src/domains/afm-app'
      - 'src/domains/afm-common'
      - 'src/domains/ecommerce-app'
      - 'src/domains/ecommerce-common'
      - 'src/domains/gps-app'
      - 'src/domains/gps-common'
      - 'src/domains/selfcare-app'
      - 'src/domains/selfcare-common'
      - 'src/domains/shared-app'
      - 'src/domains/shared-common'
      - 'src/domains/load-test'


variables:
  TIME_OUT: 10

pool:
  vmImage: 'ubuntu-20.04'

resources:
  repositories:
    - repository: terraform
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v3.0.0
      endpoint: 'io-azure-devops-github-ro'

stages:
  - stage: DEV
    dependsOn: [ ]
    condition: and(succeeded(), eq(${{parameters.DEV}}, true))
    pool:
      name: pagopa-dev-linux
    jobs:
      - job: terraform_install
        steps:
          # 1. Install terraform and terragrunt
          - template: templates/terraform-setup/template.yaml@terraform
      - job: terraform_plan
        dependsOn: terraform_install
        timeoutInMinutes: $[variables.TIME_OUT]
        steps:
          - checkout: self
          - ${{ each DOMAIN in parameters.DOMAINS }}:
              # 2. Run terragrunt plan
              - template: templates/terraform-plan/template.yaml@terraform
                displayName: "Plan ${{ DOMAIN }}"
                parameters:
                  WORKINGDIR: ${{ DOMAIN }}
                  SUBSCRIPTION: DEV-PAGOPA-SERVICE-CONN
                  ENVIRONMENT: dev

  - stage: UAT
    dependsOn: [ ]
    condition: and(succeeded(), eq(${{parameters.UAT}}, true))
    pool:
      name: pagopa-uat-linux
    jobs:
      - job: terraform_install
        steps:
          # 1. Install terraform and terragrunt
          - template: templates/terraform-setup/template.yaml@terraform
      - job: terraform_plan
        dependsOn: terraform_install
        timeoutInMinutes: $[variables.TIME_OUT]
        steps:
          - checkout: self
          - ${{ each DOMAIN in parameters.DOMAINS }}:
              # 2. Run terragrunt plan
              - template: templates/terraform-plan/template.yaml@terraform
                displayName: "Plan ${{ DOMAIN }}"
                parameters:
                  WORKINGDIR: ${{ DOMAIN }}
                  SUBSCRIPTION: UAT-PAGOPA-SERVICE-CONN
                  ENVIRONMENT: uat

  - stage: PROD
    dependsOn: [ ]
    condition: and(succeeded(), eq(${{parameters.PROD}}, true))
    pool:
      name: pagopa-prod-linux
    jobs:
      - job: terraform_install
        steps:
          # 1. Install terraform and terragrunt
          - template: templates/terraform-setup/template.yaml@terraform
      - job: terraform_plan
        dependsOn: terraform_install
        timeoutInMinutes: $[variables.TIME_OUT]
        steps:
          - checkout: self
          - ${{ each DOMAIN in parameters.DOMAINS }}:
              # 2. Run terragrunt plan
              - template: templates/terraform-plan/template.yaml@terraform
                displayName: "Plan ${{ DOMAIN }}"
                parameters:
                  WORKINGDIR: ${{ DOMAIN }}
                  SUBSCRIPTION: PROD-PAGOPA-SERVICE-CONN
                  ENVIRONMENT: prod
