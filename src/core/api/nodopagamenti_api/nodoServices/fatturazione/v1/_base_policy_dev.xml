<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <cors>
            <allowed-origins>
                <origin>*</origin>
            </allowed-origins>
            <allowed-methods>
                <method>*</method>
            </allowed-methods>
            <allowed-headers>
                <header>*</header>
            </allowed-headers>
            <expose-headers>
                <header>*</header>
            </expose-headers>
        </cors>
        <base />
        <set-backend-service base-url="http://{{aks-lb-nexi}}{{base-path-fatturazione-dev}}" />
        <set-variable name="external-scheme" value="https" />
        <set-variable name="external-host" value="${dns_pagopa_platform}" /> <!-- api.dev.platform.pagopa.it -->
        <set-variable name="external-context-path" value="${apim_base_path}" /> <!-- /fatturazione/api/v1 -->
        <choose>
            <when condition="@(Regex.IsMatch(context.Request.OriginalUrl.Path, @"^\${apim_base_path}$", RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(500)))">
                <return-response>
                    <set-status code="301" reason="See Other" />
                    <set-header name="Location" exists-action="override">
                        <value>@{
                            string str = (string)context.Variables["external-scheme"];
                            str += "://";
                            str += (string)context.Variables["external-host"];
                            str += (string)context.Variables["external-context-path"];
                            str += "/";
                            return str;
                        }</value>
                    </set-header>
                </return-response>
            </when>
        </choose>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>
