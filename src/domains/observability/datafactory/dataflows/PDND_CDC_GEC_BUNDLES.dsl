source(output(
          {_rid} as string,
          {_ts} as long,
          id as string,
          idPsp as string,
          idChannel as string,
          idBrokerPsp as string,
          idCdi as string,
          cart as boolean,
          abi as string,
          pspBusinessName as string,
          digitalStamp as boolean,
          digitalStampRestriction as boolean,
          name as string,
          description as string,
          paymentAmount as long,
          minPaymentAmount as long,
          maxPaymentAmount as long,
          paymentType as string,
          touchpoint as string,
          type as string,
          transferCategoryList as string[],
          validityDateFrom as long[],
          validityDateTo as long[],
          insertedDate as long[],
          lastUpdatedDate as long[],
          {_etag} as string,
          urlPolicyPsp as string
     ),
     allowSchemaDrift: true,
     validateSchema: false,
     inferDriftedColumnTypes: true,
     container: 'bundles',
     storeType: 'olap',
     format: 'document',
     enableChangeFeed: true,
     changeFeedStartFromTheBeginning: true,
     systemColumns: true,
     captureIntermediateUpdate: false,
     captureUserDeletes: true,
     captureTxnTTLDeletes: true,
     store: 'cosmosDB') ~> cosmos
cosmos derive(lastUpdatedDateString = iif(isNull(lastUpdatedDate), '', toString(lastUpdatedDate[1]) + '-' + lpad(toString(lastUpdatedDate[2]), 2, '0') + '-' + lpad(toString(lastUpdatedDate[3]), 2, '0') + 'T' + lpad(toString(lastUpdatedDate[4]), 2, '0') + ':' + lpad(toString(lastUpdatedDate[5]), 2, '0') + ':' + lpad(toString(lastUpdatedDate[6]), 2, '0') + '.' + lpad(toString(lastUpdatedDate[7]), 2, '0')),
          insertedDateString = iif(isNull(insertedDate), '', toString(insertedDate[1]) + '-' + lpad(toString(insertedDate[2]), 2, '0') + '-' + lpad(toString(insertedDate[3]), 2, '0') + 'T' + lpad(toString(insertedDate[4]), 2, '0') + ':' + lpad(toString(insertedDate[5]), 2, '0') + ':' + lpad(toString(insertedDate[6]), 2, '0') + '.' + lpad(toString(insertedDate[7]), 2, '0')),
          validityDateFromString = iif(isNull(validityDateFrom), '', toString(validityDateFrom[1]) + '-' + lpad(toString(validityDateFrom[1]), 2, '0') + '-' + lpad(toString(validityDateFrom[1]), 2, '0')),
          validityDateToString = iif(isNull(validityDateTo), '', toString(validityDateTo[1]) + '-' + lpad(toString(validityDateTo[1]), 2, '0') + '-' + lpad(toString(validityDateTo[1]), 2, '0')),
          {_etag} = regexReplace({_etag}, '\\\"', '')) ~> transformDateFormat
transformDateFormat select(mapColumn(
          {_rid},
          {_ts},
          id,
          idPsp,
          idChannel,
          idBrokerPsp,
          cart,
          idCdi,
          abi,
          pspBusinessName,
          urlPolicyPsp,
          digitalStamp,
          digitalStampRestriction,
          name,
          description,
          paymentAmount,
          minPaymentAmount,
          maxPaymentAmount,
          paymentType,
          touchpoint,
          type,
          transferCategoryList,
          {_etag},
          lastUpdatedDate = lastUpdatedDateString,
          insertedDate = insertedDateString,
          validityDateFrom = validityDateFromString,
          validityDateTo = validityDateToString
     ),
     skipDuplicateMapInputs: true,
     skipDuplicateMapOutputs: true) ~> selectFields
selectFields sink(allowSchemaDrift: true,
     validateSchema: false,
     format: 'json',
     container: 'pagopa-u-itn-observ-az-blob-observability-container',
     folderPath: 'bundles',
     skipDuplicateMapInputs: true,
     skipDuplicateMapOutputs: true) ~> afmgecstorage