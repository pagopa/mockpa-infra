<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
  <inbound>
    <base />
    <set-backend-service base-url="https://${hostname}/pagopa-afm-calculator-service" />

    <set-variable name="isMock" value="@(context.Request.Headers.GetValueOrDefault("Ocp-Apim-Subscription-Key","").Equals("{{afm-dev-secondary-sub-key}}") || true)" />
    <choose>
      <when condition="@(context.Variables.GetValueOrDefault<bool>("isMock"))">
      <!--Mock Responses-->
      <set-variable name="statusCode" value="@(context.Request.Headers.GetValueOrDefault("Ocp-Apim-Error-Code", "200"))" />
      <set-variable name="scenario1" value="@(context.Request.Body.As<JObject>(true)["touchpoint"].Value<string>().Equals("ATM"))" />
      <set-variable name="scenario2" value="@(context.Request.Body.As<JObject>(true)["touchpoint"].Value<string>().Equals("ANY"))" />
      <set-variable name="scenario3" value="@(context.Request.Body.As<JObject>(true)["touchpoint"].Value<string>().Equals("BETTING"))" />
      <!--Scenario 1-->
      <choose>
        <when condition="@(context.Variables.GetValueOrDefault<bool>("scenario1"))">
        <return-response>
          <set-status code="@(int.Parse((string)context.Variables["statusCode"]))" />
          <set-header name="Content-Type" exists-action="override">
            <value>application/json</value>
          </set-header>
          <set-body>[
            {
            "taxPayerFee": 130,
            "primaryCiIncurredFee": 20,
            "paymentMethod": "PO",
            "touchpoint": "ATM",
            "idBundle": "1",
            "idCiBundle": "1",
            "idPsp": "88888888888"
            }
            ]</set-body>
        </return-response>
      </when>
    </choose>
    <!--Scenario 2-->
    <choose>
      <when condition="@(context.Variables.GetValueOrDefault<bool>("scenario2"))">
      <return-response>
        <set-status code="@(int.Parse((string)context.Variables["statusCode"]))" />
        <set-header name="Content-Type" exists-action="override">
          <value>application/json</value>
        </set-header>
        <set-body>[
          {
          "taxPayerFee": 80,
          "primaryCiIncurredFee": 0,
          "paymentMethod": "PO",
          "touchpoint": "ANY",
          "idBundle": "2",
          "idCiBundle": "ANY",
          "idPsp": "88888888888"
          },
          {
          "taxPayerFee": 130,
          "primaryCiIncurredFee": 20,
          "paymentMethod": "PO",
          "touchpoint": "ATM",
          "idBundle": "1",
          "idCiBundle": "1",
          "idPsp": "88888888888"
          }
          ]</set-body>
      </return-response>
    </when>
    </choose>
    <!--Scenario 3-->
    <choose>
      <when condition="@(context.Variables.GetValueOrDefault<bool>("scenario3"))">
      <return-response>
        <set-status code="@(int.Parse((string)context.Variables["statusCode"]))" />
        <set-header name="Content-Type" exists-action="override">
          <value>application/json</value>
        </set-header>
        <set-body>[]</set-body>
      </return-response>
    </when>
    </choose>
    </when>
    </choose>
  </inbound>

  <backend>
    <base />
  </backend>

  <outbound>
    <base />
  </outbound>

  <on-error>
    <base />
  </on-error>
</policies>
