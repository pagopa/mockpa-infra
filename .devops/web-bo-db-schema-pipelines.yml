pr: none
trigger: none
#trigger:
#  - develop

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: k8sEnv
    displayName: K8s Environment
    type: string
    default: dev
    values:
      - dev
      - uat
      - prd

variables:
  ${{ if eq(parameters.k8sEnv, 'dev') }}:
    DB_HOST: pagopa-d-weu-nodo-flexible-postgresql
    AZURE_SERVICE_CONNECTION: '$(TF_DEV_AZURE_SERVICE_CONNECTION)'
    KEY_VAULT_NAME: 'pagopa-d-nodo-kv'
  ${{ elseif eq(parameters.k8sEnv, 'uat') }}:
    DB_HOST: pagopa-u-weu-nodo-flexible-postgresql
    AZURE_SERVICE_CONNECTION: '$(TF_UAT_AZURE_SERVICE_CONNECTION)'
    KEY_VAULT_NAME: 'pagopa-u-nodo-kv'
  ${{ elseif eq(parameters.k8sEnv, 'prd') }}:
    DB_HOST: pagopa-p-weu-nodo-flexible-postgresql
    AZURE_SERVICE_CONNECTION: '$(TF_PROD_AZURE_SERVICE_CONNECTION)'
    KEY_VAULT_NAME: 'pagopa-p-nodo-kv'
  ADMIN_USERNAME: azureuser
  DATABASE_NAME: nodo
  WEB_BO_USERNAME: web-bo
  WEB_BO_SCHEMA: web-bo

stages:
  - stage: initialization_jobs
    displayName: "Init ${{ parameters.k8sEnv }}"
    jobs:
      - job: initialization
        displayName: "Schemas creation job"
        steps:
          - task: AzureKeyVault@2
            displayName: "Get secrets"
            inputs:
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              keyVaultName: $(KEY_VAULT_NAME)
              secretsFilter: 'db-administrator-login-password,db-web-bo-password'
          - task: AzureCLI@2
            displayName: "web-bo schema"
            inputs:
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              scriptLocation: inlineScript
              scriptType: bash
              inlineScript: |
                az config set extension.use_dynamic_install=yes_without_prompt
                az postgres flexible-server execute --name $(DB_HOST) --admin-user $(ADMIN_USERNAME) \
                --admin-password '$(db-administrator-login-password)' --database-name $(DATABASE_NAME) \
                --querytext "
                do \$\$
                BEGIN
                  IF EXISTS (SELECT FROM pg_catalog.pg_roles WHERE  rolname = '$USERNAME') THEN
                  RAISE NOTICE 'Role \"$WEB_BO_USERNAME\" already exists. Skipping.';
                  ELSE
                  CREATE ROLE \"$WEB_BO_USERNAME\" LOGIN PASSWORD '$(db-web-bo-password)';
                  GRANT ALL PRIVILEGES ON DATABASE \"$DATABASE_NAME\" TO \"$WEB_BO_USERNAME\";
                  GRANT \"$WEB_BO_USERNAME\" to $ADMIN_USERNAME;
                  CREATE SCHEMA IF NOT EXISTS \"$WEB_BO_SCHEMA\" AUTHORIZATION \"$WEB_BO_USERNAME\";
                  END IF;
                END
                \$\$;
                "
