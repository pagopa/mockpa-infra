{
    "name": "KPI_TPNP",
    "properties": {
        "activities": [
            {
                "name": "Copy From ReEvent To KPI_TPNP",
                "type": "Copy",
                "dependsOn": [
                    {
                        "activity": "Set variable1",
                        "dependencyConditions": [
                            "Completed"
                        ]
                    }
                ],
                "policy": {
                    "timeout": "0.12:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                    "source": {
                        "type": "AzureDataExplorerSource",
                        "additionalColumns": [
                            {
                                "name": "pipelineRunID",
                                "value": {
                                    "value": "@variables('run_id')",
                                    "type": "Expression"
                                }
                            }
                        ],
                        "query": {
                            "value": "let trigger_start=bin(datetime_utc_to_local(datetime('@{variables('start_date')}'), \"Europe/Rome\"), 10m);\nlet start=datetime_add('minute', -15, trigger_start);\nlet end=datetime_add('minute', 10, start);\nlet end_resp=datetime_add('minute', 15, start);\nlet pspNotifyPayment_Req = ReEvent\n| where insertedTimestamp between (start .. end)\n| where tipoEvento in (\"pspNotifyPayment\",\"pspNotifyPaymentV2\")\n| where categoriaEvento == \"INTERFACCIA\"\n| where sottoTipoEvento == \"REQ\"\n| extend payload_xml = base64_decode_tostring(payload)\n| extend idBrokerPSP = extract(\"<idBrokerPSP>(.*)</idBrokerPSP>\", 1 , payload_xml)\n| extend channel = extract(\"<idChannel>(.*)</idChannel>\", 1 , payload_xml)\n| project-away payload\n| project dataOraEvento, idDominio, iuv, ccp, idBrokerPSP, psp, channel, sessionId, tipoEvento;\nlet pspNotifyPayment_Resp = ReEvent\n| where insertedTimestamp between (start .. end_resp)\n| where tipoEvento in (\"pspNotifyPayment\",\"pspNotifyPaymentV2\")\n| where categoriaEvento == \"INTERFACCIA\"\n| where sottoTipoEvento == \"RESP\"\n| extend payload_xml = base64_decode_tostring(payload)\n| extend outcome = extract(\"<outcome>(.*)</outcome>\", 1 , payload_xml)\n| project-away payload\n| project dataOraEvento, idDominio, iuv, ccp, sessionId, outcome, tipoEvento;\npspNotifyPayment_Req\n| join kind=leftouter pspNotifyPayment_Resp on idDominio, iuv, ccp, sessionId, tipoEvento\n| project-rename REQUEST_TIMESTAMP=dataOraEvento, RESPONSE_TIMESTAMP=dataOraEvento1\n| extend diff_time_in_ms=datetime_diff(\"millisecond\", RESPONSE_TIMESTAMP, REQUEST_TIMESTAMP)\n| extend IS_TIMEOUT=case(isempty(RESPONSE_TIMESTAMP), true, false)\n| project REQUEST_TIMESTAMP, RESPONSE_TIMESTAMP, idDominio, iuv, ccp, idBrokerPSP, psp, channel, outcome, diff_time_in_ms, IS_TIMEOUT, tipoEvento",
                            "type": "Expression"
                        },
                        "queryTimeout": "00:10:00",
                        "noTruncation": false
                    },
                    "sink": {
                        "type": "AzureDataExplorerSink",
                        "ingestionMappingName": ""
                    },
                    "enableStaging": false,
                    "validateDataConsistency": true,
                    "translator": {
                        "type": "TabularTranslator",
                        "mappings": [
                            {
                                "source": {
                                    "name": "REQUEST_TIMESTAMP",
                                    "type": "DateTime",
                                    "physicalType": "datetime"
                                },
                                "sink": {
                                    "name": "REQUEST_TIMESTAMP",
                                    "type": "DateTime",
                                    "physicalType": "datetime"
                                }
                            },
                            {
                                "source": {
                                    "name": "RESPONSE_TIMESTAMP",
                                    "type": "DateTime",
                                    "physicalType": "datetime"
                                },
                                "sink": {
                                    "name": "RESPONSE_TIMESTAMP",
                                    "type": "DateTime",
                                    "physicalType": "datetime"
                                }
                            },
                            {
                                "source": {
                                    "name": "idDominio",
                                    "type": "String",
                                    "physicalType": "string"
                                },
                                "sink": {
                                    "name": "ID_DOMINIO",
                                    "type": "String",
                                    "physicalType": "string"
                                }
                            },
                            {
                                "source": {
                                    "name": "iuv",
                                    "type": "String",
                                    "physicalType": "string"
                                },
                                "sink": {
                                    "name": "IUV",
                                    "type": "String",
                                    "physicalType": "string"
                                }
                            },
                            {
                                "source": {
                                    "name": "ccp",
                                    "type": "String",
                                    "physicalType": "string"
                                },
                                "sink": {
                                    "name": "TOKEN",
                                    "type": "String",
                                    "physicalType": "string"
                                }
                            },
                            {
                                "source": {
                                    "name": "idBrokerPSP",
                                    "type": "String",
                                    "physicalType": "string"
                                },
                                "sink": {
                                    "name": "ID_BROKER_PSP",
                                    "type": "String",
                                    "physicalType": "string"
                                }
                            },
                            {
                                "source": {
                                    "name": "psp",
                                    "type": "String",
                                    "physicalType": "string"
                                },
                                "sink": {
                                    "name": "PSP",
                                    "type": "String",
                                    "physicalType": "string"
                                }
                            },
                            {
                                "source": {
                                    "name": "channel",
                                    "type": "String",
                                    "physicalType": "string"
                                },
                                "sink": {
                                    "name": "CANALE",
                                    "type": "String",
                                    "physicalType": "string"
                                }
                            },
                            {
                                "source": {
                                    "name": "outcome",
                                    "type": "String",
                                    "physicalType": "string"
                                },
                                "sink": {
                                    "name": "OUTCOME",
                                    "type": "String",
                                    "physicalType": "string"
                                }
                            },
                            {
                                "source": {
                                    "name": "diff_time_in_ms",
                                    "type": "Int64",
                                    "physicalType": "long"
                                },
                                "sink": {
                                    "name": "DIFF_TIME_IN_MS",
                                    "type": "Int64",
                                    "physicalType": "long"
                                }
                            },
                            {
                                "source": {
                                    "name": "IS_TIMEOUT",
                                    "type": "Boolean",
                                    "physicalType": "bool"
                                },
                                "sink": {
                                    "name": "IS_TIMEOUT",
                                    "type": "Boolean",
                                    "physicalType": "bool"
                                }
                            },
                            {
                                "source": {
                                    "name": "pipelineRunID",
                                    "type": "String"
                                },
                                "sink": {
                                    "name": "pipelineRunID",
                                    "type": "String",
                                    "physicalType": "string"
                                }
                            },
                            {
                                "source": {
                                    "name": "tipoEvento",
                                    "type": "String",
                                    "physicalType": "string"
                                },
                                "sink": {
                                    "name": "TIPO_EVENTO",
                                    "type": "String",
                                    "physicalType": "string"
                                }
                            }
                        ],
                        "typeConversion": true,
                        "typeConversionSettings": {
                            "allowDataTruncation": true,
                            "treatBooleanAsNumber": false
                        }
                    }
                },
                "inputs": [
                    {
                        "referenceName": "${inputdataset}",
                        "type": "DatasetReference"
                    }
                ],
                "outputs": [
                    {
                        "referenceName": "${outputdataset}",
                        "type": "DatasetReference"
                    }
                ]
            },
            {
                "name": "run_id",
                "type": "SetVariable",
                "dependsOn": [],
                "policy": {
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                    "variableName": "run_id",
                    "value": {
                        "value": "@pipeline().RunId",
                        "type": "Expression"
                    }
                }
            },
            {
                "name": "start_date",
                "type": "SetVariable",
                "dependsOn": [
                    {
                        "activity": "run_id",
                        "dependencyConditions": [
                            "Completed"
                        ]
                    }
                ],
                "policy": {
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                    "variableName": "start_date",
                    "value": {
                        "value": "@pipeline().TriggerTime",
                        "type": "Expression"
                    }
                }
            },
            {
                "name": "Lookup1",
                "type": "Lookup",
                "dependsOn": [
                    {
                        "activity": "start_date",
                        "dependencyConditions": [
                            "Completed"
                        ]
                    }
                ],
                "policy": {
                    "timeout": "0.12:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                    "source": {
                        "type": "AzureDataExplorerSource",
                        "query": {
                            "value": "let trigger_start=bin(datetime_utc_to_local(datetime('@{variables('start_date')}'), \"Europe/Rome\"), 10m);\nlet start=datetime_add('minute', -15, trigger_start);\nlet end=datetime_add('minute', 10, start);\nlet end_resp=datetime_add('minute', 15, start);\nlet pspNotifyPayment_Req = ReEvent\n| where insertedTimestamp between (start .. end)\n| where tipoEvento in (\"pspNotifyPayment\",\"pspNotifyPaymentV2\")\n| where categoriaEvento == \"INTERFACCIA\"\n| where sottoTipoEvento == \"REQ\"\n| extend payload_xml = base64_decode_tostring(payload)\n| extend idBrokerPSP = extract(\"<idBrokerPSP>(.*)</idBrokerPSP>\", 1 , payload_xml)\n| extend channel = extract(\"<idChannel>(.*)</idChannel>\", 1 , payload_xml)\n| project-away payload\n| project dataOraEvento, idDominio, iuv, ccp, idBrokerPSP, psp, channel, sessionId, tipoEvento;\nlet pspNotifyPayment_Resp = ReEvent\n| where insertedTimestamp between (start .. end_resp)\n| where tipoEvento in (\"pspNotifyPayment\",\"pspNotifyPaymentV2\")\n| where categoriaEvento == \"INTERFACCIA\"\n| where sottoTipoEvento == \"RESP\"\n| extend payload_xml = base64_decode_tostring(payload)\n| extend outcome = extract(\"<outcome>(.*)</outcome>\", 1 , payload_xml)\n| project-away payload\n| project dataOraEvento, idDominio, iuv, ccp, sessionId, outcome, tipoEvento;\npspNotifyPayment_Req\n| join kind=leftouter pspNotifyPayment_Resp on idDominio, iuv, ccp, sessionId\n| project-rename REQUEST_TIMESTAMP=dataOraEvento, RESPONSE_TIMESTAMP=dataOraEvento1\n| extend diff_time_in_ms=datetime_diff(\"millisecond\", RESPONSE_TIMESTAMP, REQUEST_TIMESTAMP)\n| extend IS_TIMEOUT=case(isempty(RESPONSE_TIMESTAMP), true, false)\n| project REQUEST_TIMESTAMP, RESPONSE_TIMESTAMP, idDominio, iuv, ccp, idBrokerPSP, psp, channel, outcome, diff_time_in_ms, IS_TIMEOUT, tipoEvento",
                            "type": "Expression"
                        },
                        "queryTimeout": "00:10:00",
                        "noTruncation": false
                    },
                    "dataset": {
                        "referenceName": "${inputdataset}",
                        "type": "DatasetReference"
                    },
                    "firstRowOnly": false
                }
            },
            {
                "name": "Set variable1",
                "type": "SetVariable",
                "dependsOn": [
                    {
                        "activity": "Lookup1",
                        "dependencyConditions": [
                            "Completed"
                        ]
                    }
                ],
                "policy": {
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                    "variableName": "count_record",
                    "value": {
                        "value": "@string(activity('Lookup1').output.count)",
                        "type": "Expression"
                    }
                }
            },
            {
                "name": "If Condition1",
                "type": "IfCondition",
                "dependsOn": [
                    {
                        "activity": "Copy From ReEvent To KPI_TPNP",
                        "dependencyConditions": [
                            "Completed"
                        ]
                    }
                ],
                "userProperties": [],
                "typeProperties": {
                    "expression": {
                        "value": "@equals(variables('count_record'),string(activity('Copy From ReEvent To KPI_TPNP').output.rowsCopied))",
                        "type": "Expression"
                    },
                    "ifFalseActivities": [
                        {
                            "name": "Errore",
                            "type": "Fail",
                            "dependsOn": [],
                            "userProperties": [],
                            "typeProperties": {
                                "message": {
                                    "value": "@concat('Lette :' ,variables('count_record'), ' Scritte : ', activity('Copy From ReEvent To KPI_TPNP').output.rowsCopied)",
                                    "type": "Expression"
                                },
                                "errorCode": "412"
                            }
                        }
                    ]
                }
            }
        ],
        "variables": {
            "start_date": {
                "type": "String"
            },
            "run_id": {
                "type": "String"
            },
            "count_record": {
                "type": "String"
            }
        },
        "annotations": [],
        "lastPublishTime": "2023-09-25T13:31:11Z"
    },
    "type": "Microsoft.DataFactory/factories/pipelines"
}