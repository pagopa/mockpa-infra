<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <base />
        <set-variable name="password" value="{{nodoAuthPassword}}" />
      <set-body>
        @{
          // get request body content
          XElement doc = context.Request.Body.As<XElement>(preserveContent: true);
          XElement body = doc.Descendants(doc.Name.Namespace + "Body").FirstOrDefault();
          // get primitive
          XElement primitive = (XElement) body.FirstNode;
          // get prev field
          XElement prevField = primitive.Descendants("idChannel").FirstOrDefault();
          if (prevField == null) {
            prevField = primitive.Descendants("identificativoCanale").FirstOrDefault();
          }
          if (prevField == null) {
            prevField = primitive.Descendants("identificativoStazioneIntermediarioPA").FirstOrDefault();
          }
          // if password exists then set default password
          // otherwise add a password field with default value
          XElement password = primitive.Descendants("password").FirstOrDefault();
          String passwordValue = ((string) context.Variables["password"]);
          if (password != null) {
            password.Value = passwordValue;
          } else {
            password = XElement.Parse("<password>" + passwordValue + "</password>");
            prevField.AddAfterSelf(password);
          }

          return doc.ToString();
        }
      </set-body>
      <set-header name="X-Forwarded-For" exists-action="override">
        <value>{{xForwardedFor}}</value>
      </set-header>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>
