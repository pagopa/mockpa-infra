# only manual
trigger: none
pr: none

parameters:
  - name: 'DEV'
    displayName: 'Plan on DEV environment'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'UAT'
    displayName: 'Plan on UAT environment'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'PROD'
    displayName: 'Plan on PROD environment'
    type: boolean
    default: True
    values:
      - False
      - True

pool:
  vmImage: 'ubuntu-20.04'

resources:
  repositories:
    - repository: terraform
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v17
      endpoint: 'io-azure-devops-github-ro'

stages:
  - stage: DEV
    dependsOn: []
    condition: and(succeeded(), eq(${{parameters.DEV}}, true))
    pool:
      name: pagopa-dev-linux
    jobs:
      - job: terraform_install
        steps:
          # 1. Install terraform
          - template: templates/terraform-setup/template.yaml@terraform
      - job: terraform_plan
        dependsOn: terraform_install
        steps:
          # 2. Run terraform plan
          - template: templates/terraform-plan/template.yaml@terraform
            parameters:
              SUBSCRIPTION: DEV-PAGOPA-SERVICE-CONN
              ENVIRONMENT: dev
      - deployment: terraform_apply
        dependsOn: terraform_plan
        continueOnError: false
        environment: 'DEV'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                # 3. Run terraform apply
                - template: templates/terraform-apply/template.yaml@terraform
                  parameters:
                    SUBSCRIPTION: DEV-PAGOPA-SERVICE-CONN
                    ENVIRONMENT: dev

  - stage: UAT
    dependsOn: []
    condition: and(succeeded(), eq(${{parameters.UAT}}, true))
    pool:
      name: pagopa-uat-linux
    jobs:
      - job: terraform_install
        steps:
          # 1. Install terraform
          - template: templates/terraform-setup/template.yaml@terraform
      - job: terraform_plan
        dependsOn: terraform_install
        steps:
          - checkout: self
          # 2. Run terraform plan
          - template: templates/terraform-plan/template.yaml@terraform
            parameters:
              SUBSCRIPTION: UAT-PAGOPA-SERVICE-CONN
              ENVIRONMENT: uat
      - deployment: terraform_apply
        dependsOn: terraform_plan
        continueOnError: false
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                # 3. Run terraform apply
                - template: templates/terraform-apply/template.yaml@terraform
                  parameters:
                    SUBSCRIPTION: UAT-PAGOPA-SERVICE-CONN
                    ENVIRONMENT: uat

  - stage: PROD
    dependsOn: []
    condition: and(succeeded(), eq(${{parameters.PROD}}, true))
    pool:
      name: pagopa-prod-linux
    jobs:
      - job: terraform_install
        steps:
          # 1. Install terraform
          - template: templates/terraform-setup/template.yaml@terraform
      - job: terraform_plan
        dependsOn: terraform_install
        steps:
          - checkout: self
          # 2. Run terraform plan
          - template: templates/terraform-plan/template.yaml@terraform
            parameters:
              SUBSCRIPTION: PROD-PAGOPA-SERVICE-CONN
              ENVIRONMENT: prod
      - deployment: terraform_apply
        dependsOn: terraform_plan
        continueOnError: false
        environment: 'PROD'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                # 3. Run terraform apply
                - template: templates/terraform-apply/template.yaml@terraform
                  parameters:
                    SUBSCRIPTION: PROD-PAGOPA-SERVICE-CONN
                    ENVIRONMENT: prod
