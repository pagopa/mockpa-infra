pr: none
trigger: none
#trigger:
#  - develop

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: k8sEnv
    displayName: K8s Environment
    type: string
    default: dev
    values:
      - dev
      - it
      - prf
      - uat
      - prd
# version of liquibase db.changelog-master-*.xml to run
  - name: dbVersion
    displayName: Database Version
    type: string
# liquibase context to run specific changelogs,default to '_' to run only uncontexted changelogs
  - name: lbContexts
    displayName: Liquibase Contexts
    type: string
    default: '_'
  # liquibase log level if needed finer logs
  - name: lbLogLevel
    displayName: Liquibase Log Level
    type: string
    default: INFO
    values:
      - INFO
      - FINE
      - WARNING
      - SEVERE

variables:
  ${{ if eq(parameters.k8sEnv, 'dev') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_DEV_AZURE_SERVICE_CONNECTION)'
    JDBC_URL: jdbc:postgresql://pagopa-d-weu-nodo-flexible-postgresql.postgres.database.azure.com:5432/nodo?sslmode=require&prepareThreshold=0
    KEY_VAULT_NAME: pagopa-d-nodo-kv
  ${{ if eq(parameters.k8sEnv, 'it') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_DEV_AZURE_SERVICE_CONNECTION)'
    JDBC_URL: jdbc:postgresql://pagopa-d-weu-nodo-flexible-postgresql.postgres.database.azure.com:5432/nodo-int?sslmode=require&prepareThreshold=0
    KEY_VAULT_NAME: pagopa-d-nodo-kv
  ${{ elseif eq(parameters.k8sEnv, 'prf') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_UAT_AZURE_SERVICE_CONNECTION)'
    JDBC_URL: jdbc:postgresql://pagopa-u-weu-nodo-flexible-postgresql.postgres.database.azure.com:6432/nodo-prf?sslmode=require&prepareThreshold=0
    KEY_VAULT_NAME: pagopa-u-nodo-kv
  ${{ elseif eq(parameters.k8sEnv, 'uat') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_UAT_AZURE_SERVICE_CONNECTION)'
    JDBC_URL: jdbc:postgresql://pagopa-u-weu-nodo-flexible-postgresql.postgres.database.azure.com:6432/nodo?sslmode=require&prepareThreshold=0
    KEY_VAULT_NAME: pagopa-u-nodo-kv
  ${{ elseif eq(parameters.k8sEnv, 'prd') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_PROD_AZURE_SERVICE_CONNECTION)'
    JDBC_URL: jdbc:postgresql://pagopa-p-weu-nodo-flexible-postgresql.postgres.database.azure.com:6432/nodo?sslmode=require&prepareThreshold=0
    KEY_VAULT_NAME: pagopa-p-nodo-kv
  APPROVE_NOTIFY_GROUP: '[pagoPA-iac]\pagopa-iac-externals-team'
  APPROVE_NOTIFY_ADMIN: '[pagoPA-iac]\Project Administrators'
  CFG_USERNAME: cfg
  CFG_SCHEMA: cfg
  OFFLINE_USERNAME: offline
  OFFLINE_SCHEMA: offline
  ONLINE_USERNAME: online
  ONLINE_SCHEMA: online
  RE_USERNAME: re
  RE_SCHEMA: re
  WFESP_USERNAME: wfesp
  WFESP_SCHEMA: wfesp

stages:
  - stage: liquibase_status
    displayName: "Liquibase status"
    jobs:
      - job: liquibase_status_job
        displayName: "Liquibase status and validation"
        steps:
          - checkout: self
          - script: |
              cd $(Pipeline.Workspace)
              mkdir liquibase-app
              wget -c https://github.com/liquibase/liquibase/releases/download/v4.17.1/liquibase-4.17.1.tar.gz
              tar -xzf liquibase-4.17.1.tar.gz -C liquibase-app
              rm -rf liquibase-4.17.1.tar.gz
              ls -la liquibase-app
              echo "##vso[task.prependpath]$(Pipeline.Workspace)/liquibase-app"
            displayName: "Install Liquibase"
          - task: AzureKeyVault@2
            displayName: "Get $(KEY_VAULT_NAME) secrets"
            inputs:
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              keyVaultName: $(KEY_VAULT_NAME)
              secretsFilter: 'db-cfg-password,db-online-password,db-offline-password,db-re-password,db-wfesp-password'
          - script: |

              run_liquibase () {
                COMMAND=$1
                USER=$2
                PASS=$3
                PATH=$4
                SCHEMA=$5

                shift 5

                sh $(Pipeline.Workspace)/liquibase-app/liquibase \
                --url="$(JDBC_URL)" \
                --username="$USER" \
                --password="$PASS" \
                --classpath=src/psql/nodo/liquibase/changelog/$PATH \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
                --liquibaseSchemaName="$SCHEMA" \
                --defaultSchemaName="$SCHEMA" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                status "$@"
              }

              run_liquibase status   "$(CFG_USERNAME)"     "$(db-cfg-password)"     cfg     "$(CFG_SCHEMA)"     -Dschema="$(CFG_SCHEMA)" -Ddomain="${{ parameters.k8sEnv }}"
              run_liquibase status   "$(ONLINE_USERNAME)"  "$(db-online-password)"  online  "$(ONLINE_SCHEMA)"  -DschemaOffline="$(OFFLINE_SCHEMA)" -DusernameOffline="$(OFFLINE_USERNAME)" -Ddomain="${{ parameters.k8sEnv }}"
              run_liquibase status   "$(OFFLINE_USERNAME)" "$(db-offline-password)" cfg     "$(OFFLINE_SCHEMA)" -Dschema=$(OFFLINE_SCHEMA) -DschemaOnline="$(ONLINE_SCHEMA)" -Ddomain="${{ parameters.k8sEnv }}"
              run_liquibase status   "$(RE_USERNAME)"      "$(db-re-password)"      re      "$(RE_SCHEMA)"      -Dschema="$(RE_SCHEMA)" -Ddomain="${{ parameters.k8sEnv }}"
              run_liquibase status   "$(WFESP_USERNAME)"   "$(db-wfesp-password)"   wfesp   "$(WFESP_SCHEMA)"   -Dschema=$(WFESP_SCHEMA) -Ddomain="${{ parameters.k8sEnv }}"

              run_liquibase validate "$(CFG_USERNAME)"     "$(db-cfg-password)"     cfg     "$(CFG_SCHEMA)"     -Dschema="$(CFG_SCHEMA)" -Ddomain="${{ parameters.k8sEnv }}"
              run_liquibase validate "$(ONLINE_USERNAME)"  "$(db-online-password)"  online  "$(ONLINE_SCHEMA)"  -DschemaOffline="$(OFFLINE_SCHEMA)" -DusernameOffline="$(OFFLINE_USERNAME)" -Ddomain="${{ parameters.k8sEnv }}"
              run_liquibase validate "$(OFFLINE_USERNAME)" "$(db-offline-password)" cfg     "$(OFFLINE_SCHEMA)" -Dschema=$(OFFLINE_SCHEMA) -DschemaOnline="$(ONLINE_SCHEMA)" -Ddomain="${{ parameters.k8sEnv }}"
              run_liquibase validate "$(RE_USERNAME)"      "$(db-re-password)"      re      "$(RE_SCHEMA)"      -Dschema="$(RE_SCHEMA)" -Ddomain="${{ parameters.k8sEnv }}"
              run_liquibase validate "$(WFESP_USERNAME)"   "$(db-wfesp-password)"   wfesp   "$(WFESP_SCHEMA)"   -Dschema=$(WFESP_SCHEMA) -Ddomain="${{ parameters.k8sEnv }}"


      - job: prd_approval
        dependsOn: liquibase_status_job
        condition: eq('${{ parameters.k8sEnv }}', 'prd')
        pool: server
        displayName: "Approval"
        timeoutInMinutes: 16
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 15
            inputs:
              notifyUsers: |
                $(APPROVE_NOTIFY_GROUP)
                $(APPROVE_NOTIFY_ADMIN)
              instructions: "Please check liquibase status and validation for each database and resume if correct"
              onTimeout: 'reject'
      - job: initialization
        dependsOn: [liquibase_status_job,prd_approval]
        condition: or(eq('${{ parameters.k8sEnv }}', 'dev'),eq('${{ parameters.k8sEnv }}', 'uat'),and(eq('${{ parameters.k8sEnv }}', 'prd'),not(failed('prd_approval'))))
        displayName: "Update nodo DB ${{ parameters.k8sEnv }}"
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
          - script: |
              cd $(Pipeline.Workspace)
              mkdir liquibase-app
              wget -c https://github.com/liquibase/liquibase/releases/download/v4.17.1/liquibase-4.17.1.tar.gz
              tar -xzf liquibase-4.17.1.tar.gz -C liquibase-app
              rm -rf liquibase-4.17.1.tar.gz
              ls -la liquibase-app
              echo "##vso[task.prependpath]$(Pipeline.Workspace)/liquibase-app"
            displayName: "Install Liquibase"
          - task: AzureKeyVault@2
            displayName: "Get $(KEY_VAULT_NAME) secrets"
            inputs:
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              keyVaultName: $(KEY_VAULT_NAME)
              secretsFilter: 'db-cfg-password,db-online-password,db-offline-password,db-re-password,db-wfesp-password'
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(CFG_USERNAME)" \
              --password="$(db-cfg-password)" \
              --classpath=src/psql/nodo/liquibase/changelog/cfg \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(CFG_SCHEMA)" \
              --defaultSchemaName="$(CFG_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              update -Dschema=$(CFG_SCHEMA) -Ddomain=${{ parameters.k8sEnv }}
            displayName: "Run Liquibase cfg"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(CFG_USERNAME)" \
              --password="$(db-cfg-password)" \
              --classpath=src/psql/nodo/liquibase/changelog/cfg \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(CFG_SCHEMA)" \
              --defaultSchemaName="$(CFG_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              tag ${{ parameters.dbVersion }}
            displayName: "Tag cfg"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(ONLINE_USERNAME)" \
              --password="$(db-online-password)" \
              --classpath=src/psql/nodo/liquibase/changelog/online \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(ONLINE_SCHEMA)" \
              --defaultSchemaName="$(ONLINE_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              update -Dschema=$(ONLINE_SCHEMA) -DschemaOffline=$(OFFLINE_SCHEMA) -DusernameOffline=$(OFFLINE_USERNAME) -Ddomain=${{ parameters.k8sEnv }}
            displayName: "Run Liquibase online"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(ONLINE_USERNAME)" \
              --password="$(db-online-password)" \
              --classpath=src/psql/nodo/liquibase/changelog/online \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(ONLINE_SCHEMA)" \
              --defaultSchemaName="$(ONLINE_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              tag ${{ parameters.dbVersion }}
            displayName: "Tag online"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(OFFLINE_USERNAME)" \
              --password="$(db-offline-password)" \
              --classpath=src/psql/nodo/liquibase/changelog/offline \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(OFFLINE_SCHEMA)" \
              --defaultSchemaName="$(OFFLINE_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              update -Dschema=$(OFFLINE_SCHEMA) -DschemaOnline=$(ONLINE_SCHEMA) -Ddomain=${{ parameters.k8sEnv }}
            displayName: "Run Liquibase offline"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(OFFLINE_USERNAME)" \
              --password="$(db-offline-password)" \
              --classpath=src/psql/nodo/liquibase/changelog/offline \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(OFFLINE_SCHEMA)" \
              --defaultSchemaName="$(OFFLINE_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              tag ${{ parameters.dbVersion }}
            displayName: "Tag offline"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(RE_USERNAME)" \
              --password="$(db-re-password)" \
              --classpath=src/psql/nodo/liquibase/changelog/re \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(RE_SCHEMA)" \
              --defaultSchemaName="$(RE_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              update -Dschema=$(RE_SCHEMA) -Ddomain=${{ parameters.k8sEnv }}
            displayName: "Run Liquibase re"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(RE_USERNAME)" \
              --password="$(db-re-password)" \
              --classpath=src/psql/nodo/liquibase/changelog/re \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(RE_SCHEMA)" \
              --defaultSchemaName="$(RE_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              tag ${{ parameters.dbVersion }}
            displayName: "Tag re"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(WFESP_USERNAME)" \
              --password="$(db-wfesp-password)" \
              --classpath=src/psql/nodo/liquibase/changelog/wfesp \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(WFESP_SCHEMA)" \
              --defaultSchemaName="$(WFESP_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              update -Dschema=$(WFESP_SCHEMA) -Ddomain=${{ parameters.k8sEnv }}
            displayName: "Run Liquibase wfesp"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(WFESP_USERNAME)" \
              --password="$(db-wfesp-password)" \
              --classpath=src/psql/nodo/liquibase/changelog/wfesp \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(WFESP_SCHEMA)" \
              --defaultSchemaName="$(WFESP_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              tag ${{ parameters.dbVersion }}
            displayName: "Tag wfesp"
