pr: none
trigger: none
#trigger:
#  - develop

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: k8sEnv
    displayName: K8s Environment
    type: string
    default: dev
    values:
      - dev
      - uat
      - prd
# version of liquibase db.changelog-master-*.xml to run
  - name: dbVersion
    displayName: Database Version
    type: string
# liquibase context to run specific changelogs,default to '_' to run only uncontexted changelogs
  - name: lbContexts
    displayName: Liquibase Contexts
    type: string
    default: '_'
  # liquibase log level if needed finer logs
  - name: lbLogLevel
    displayName: Liquibase Log Level
    type: string
    default: INFO
    values:
      - INFO
      - FINE
      - WARNING
      - SEVERE

variables:
  ${{ if eq(parameters.k8sEnv, 'dev') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_DEV_AZURE_SERVICE_CONNECTION)'
    JDBC_URL: jdbc:postgresql://pagopa-d-weu-nodo-flexible-postgresql.postgres.database.azure.com:5432/nodo?sslmode=require
    KEY_VAULT_NAME: pagopa-d-nodo-kv
  ${{ elseif eq(parameters.k8sEnv, 'uat') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_UAT_AZURE_SERVICE_CONNECTION)'
    JDBC_URL: jdbc:postgresql://pagopa-u-weu-nodo-flexible-postgresql.postgres.database.azure.com:5432/nodo?sslmode=require
    KEY_VAULT_NAME: pagopa-u-nodo-kv
  ${{ elseif eq(parameters.k8sEnv, 'prd') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_PROD_AZURE_SERVICE_CONNECTION)'
    JDBC_URL: jdbc:postgresql://pagopa-p-weu-nodo-flexible-postgresql.postgres.database.azure.com:5432/nodo?sslmode=require
    KEY_VAULT_NAME: pagopa-p-nodo-kv
  APPROVE_NOTIFY_GROUP: '[pagoPA-iac]\pagopa-iac-externals-team'
  APPROVE_NOTIFY_ADMIN: '[pagoPA-iac]\Project Administrators'
  WEB_BO_USERNAME: web-bo
  WEB_BO_SCHEMA: web-bo

stages:
  - stage: liquibase_status
    displayName: "Liquibase status"
    jobs:
      - job: liquibase_status_job
        displayName: "Liquibase status and validation"
        steps:
          - checkout: self
          - script: |
              cd $(Pipeline.Workspace)
              mkdir liquibase-app
              wget -c https://github.com/liquibase/liquibase/releases/download/v4.17.1/liquibase-4.17.1.tar.gz
              tar -xzf liquibase-4.17.1.tar.gz -C liquibase-app
              rm -rf liquibase-4.17.1.tar.gz
              ls -la liquibase-app
              echo "##vso[task.prependpath]$(Pipeline.Workspace)/liquibase-app"
            displayName: "Install Liquibase"
          - task: AzureKeyVault@2
            displayName: "Get $(KEY_VAULT_NAME) secrets"
            inputs:
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              keyVaultName: $(KEY_VAULT_NAME)
              secretsFilter: 'db-web-bo-password'
          - script: |
              liquibase \
              --url=$(JDBC_URL) \
              --username=$(WEB_BO_USERNAME) \
              --password=$(db-web-bo-password) \
              --classpath=src/psql/web-bo/liquibase/changelog/web-bo \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName=$(WEB_BO_SCHEMA) \
              --defaultSchemaName=$(WEB_BO_SCHEMA) \
              --contexts=${{ parameters.lbContexts }} \
              --log-level=${{ parameters.lbLogLevel }} \
              status -Dschema=$(WEB_BO_SCHEMA)
            displayName: "web-bo db status"
          - script: |
              liquibase \
              --url=$(JDBC_URL) \
              --username=$(WEB_BO_USERNAME) \
              --password=$(db-web-bo-password) \
              --classpath=src/psql/web-bo/liquibase/changelog/web-bo \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName=$(WEB_BO_SCHEMA) \
              --defaultSchemaName=$(WEB_BO_SCHEMA) \
              --contexts=${{ parameters.lbContexts }} \
              --log-level=${{ parameters.lbLogLevel }} \
              validate -Dschema=$(WEB_BO_SCHEMA)
            displayName: "web-bo db validate"
      - job: prd_approval
        dependsOn: liquibase_status_job
        condition: eq('${{ parameters.k8sEnv }}', 'prd')
        pool: server
        displayName: "Approval"
        timeoutInMinutes: 16
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 15
            inputs:
              notifyUsers: |
                $(APPROVE_NOTIFY_GROUP)
                $(APPROVE_NOTIFY_ADMIN)
              instructions: "Please check liquibase status and validation for each database and resume if correct"
              onTimeout: 'reject'
      - job: initialization
        dependsOn: prd_approval
        condition: or(eq('${{ parameters.k8sEnv }}', 'dev'),eq('${{ parameters.k8sEnv }}', 'uat'),and(eq('${{ parameters.k8sEnv }}', 'prd'),not(failed('prd_approval'))))
        displayName: "Update web-bo DB ${{ parameters.k8sEnv }}"
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
          - script: |
              cd $(Pipeline.Workspace)
              mkdir liquibase-app
              wget -c https://github.com/liquibase/liquibase/releases/download/v4.17.1/liquibase-4.17.1.tar.gz
              tar -xzf liquibase-4.17.1.tar.gz -C liquibase-app
              rm -rf liquibase-4.17.1.tar.gz
              ls -la liquibase-app
              echo "##vso[task.prependpath]$(Pipeline.Workspace)/liquibase-app"
            displayName: "Install Liquibase"
          - task: AzureKeyVault@2
            displayName: "Get $(KEY_VAULT_NAME) secrets"
            inputs:
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              keyVaultName: $(KEY_VAULT_NAME)
              secretsFilter: 'db-web-bo-password'
          - script: |
              liquibase \
              --url=$(JDBC_URL) \
              --username=$(WEB_BO_USERNAME) \
              --password=$(db-web-bo-password) \
              --classpath=src/psql/web-bo/liquibase/changelog/web-bo \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName=$(WEB_BO_SCHEMA) \
              --defaultSchemaName=$(WEB_BO_SCHEMA) \
              --contexts=${{ parameters.lbContexts }} \
              --log-level=${{ parameters.lbLogLevel }} \
              update -Dschema=$(WEB_BO_SCHEMA)
            displayName: "Run Liquibase web-bo"
          - script: |
              liquibase \
              --url=$(JDBC_URL) \
              --username=$(WEB_BO_USERNAME) \
              --password=$(db-web-bo-password) \
              --classpath=src/psql/web-bo/liquibase/changelog/web-bo \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName=$(WEB_BO_SCHEMA) \
              --defaultSchemaName=$(WEB_BO_SCHEMA) \
              --contexts=${{ parameters.lbContexts }} \
              --log-level=${{ parameters.lbLogLevel }} \
              tag ${{ parameters.dbVersion }}
            displayName: "Tag web-bo"
