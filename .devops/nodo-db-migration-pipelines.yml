pr: none
trigger: none
#trigger:
#  - develop

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: k8sEnv
    displayName: K8s Environment
    type: string
    default: dev
    values:
      - dev
      - uat
      - prd
  - name: dbVersion
    displayName: Database Version
    type: string
  - name: lbLogLevel
    displayName: Liquibase Log Level
    type: string
    default: INFO
    values:
      - INFO
      - FINE
      - WARNING
      - SEVERE

variables:
  - name: DEV_AZURE_SERVICE_CONNECTION
    value: '$(TF_DEV_AZURE_SERVICE_CONNECTION)'
  - name: UAT_AZURE_SERVICE_CONNECTION
    value: '$(TF_UAT_AZURE_SERVICE_CONNECTION)'
  - name: PRD_AZURE_SERVICE_CONNECTION
    value: '$(TF_PROD_AZURE_SERVICE_CONNECTION)'
  - name: changelogRoot
    value: $(Pipeline.Workspace)/src/psql/nodo/liquibase/changelog
  - name: jdbUrl-dev
    value: jdbc:postgresql://pagopa-d-weu-nodo-flexible-postgresql-2.postgres.database.azure.com:5432/nodo?sslmode=require
  - name: jdbUrl-uat
    value: jdbc:postgresql://pagopa-d-weu-nodo-flexible-postgresql-2.postgres.database.azure.com:5432/nodo?sslmode=require
  - name: jdbUrl-prd
    value: jdbc:postgresql://pagopa-d-weu-nodo-flexible-postgresql-2.postgres.database.azure.com:5432/nodo?sslmode=require

stages:
  ## GET INFO
  - stage: get_info
    displayName: "Initialization"
    jobs:
      - job: initialization
        displayName: "Update nodo DB ${{ parameters.k8sEnv }}"
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
          - script: |
              cd $(Pipeline.Workspace)
              mkdir liquibase-app
              wget -c https://github.com/liquibase/liquibase/releases/download/v4.17.1/liquibase-4.17.1.tar.gz
              tar -xzf liquibase-4.17.1.tar.gz -C liquibase-app
              rm -rf liquibase-4.17.1.tar.gz
              ls -la liquibase-app
              echo "##vso[task.prependpath]$(Pipeline.Workspace)/liquibase-app"
            displayName: "Install Liquibase"
          - ${{ if eq(parameters.k8sEnv, 'dev') }}:
              - task: AzureKeyVault@2
                displayName: "Get dev secrets"
                inputs:
                  azureSubscription: $(DEV_AZURE_SERVICE_CONNECTION)
                  keyVaultName: 'pagopa-d-nodo-kv'
                  secretsFilter: '*'
                  runAsPreJob: true
          - ${{ elseif eq(parameters.k8sEnv, 'uat') }}:
              - task: AzureKeyVault@2
                displayName: "Get uat secrets"
                inputs:
                  azureSubscription: $(UAT_AZURE_SERVICE_CONNECTION)
                  keyVaultName: 'pagopa-u-nodo-kv'
                  secretsFilter: '*'
                  runAsPreJob: true
          - ${{ elseif eq(parameters.k8sEnv, 'prd') }}:
              - task: AzureKeyVault@2
                displayName: "Get prd secrets"
                inputs:
                  azureSubscription: $(PRD_AZURE_SERVICE_CONNECTION)
                  keyVaultName: 'pagopa-p-nodo-kv'
                  secretsFilter: '*'
                  runAsPreJob: true
          - ${{ if eq(parameters.k8sEnv, 'dev') }}:
              - script:
                  echo "##vso[task.setvariable variable=JDBC_URL;]$(jdbUrl-dev)"
          - ${{ elseif eq(parameters.k8sEnv, 'uat') }}:
              - script:
                  echo "##vso[task.setvariable variable=JDBC_URL;]$(jdbUrl-uat)"
          - ${{ elseif eq(parameters.k8sEnv, 'prd') }}:
              - script:
                  echo "##vso[task.setvariable variable=JDBC_URL;]$(jdbUrl-prd)"
          - script: |
              liquibase \
              --url=$(JDBC_URL) \
              --username=cfg \
              --password=$(db-cfg-password) \
              --classpath=src/psql/nodo/liquibase/changelog/cfg \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName=cfg \
              --defaultSchemaName=cfg \
              --contexts=${{ parameters.k8sEnv }} \
              --log-level=${{ parameters.lbLogLevel }} \
              update -Dschema=cfg
            displayName: "Run Liquibase cfg"
          - script: |
              liquibase \
              --url=$(JDBC_URL) \
              --username=online \
              --password=$(db-online-password) \
              --classpath=src/psql/nodo/liquibase/changelog/online \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName=online \
              --defaultSchemaName=online \
              --contexts=${{ parameters.k8sEnv }} \
              --log-level=${{ parameters.lbLogLevel }} \
              update -Dschema=online -DschemaOffline=offline -DusernameOffline=offline
            displayName: "Run Liquibase online"
          - script: |
              liquibase \
              --url=$(JDBC_URL) \
              --username=offline \
              --password=$(db-offline-password) \
              --classpath=src/psql/nodo/liquibase/changelog/offline \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName=offline \
              --defaultSchemaName=offline \
              --contexts=${{ parameters.k8sEnv }} \
              --log-level=${{ parameters.lbLogLevel }} \
              update -Dschema=offline -DschemaOnline=online
            displayName: "Run Liquibase offline"
          - script: |
              liquibase \
              --url=$(JDBC_URL) \
              --username=re \
              --password=$(db-re-password) \
              --classpath=src/psql/nodo/liquibase/changelog/re \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName=re \
              --defaultSchemaName=re \
              --contexts=${{ parameters.k8sEnv }} \
              --log-level=${{ parameters.lbLogLevel }} \
              update -Dschema=re
            displayName: "Run Liquibase re"
          - script: |
              liquibase \
              --url=$(JDBC_URL) \
              --username=wfesp \
              --password=$(db-wfesp-password) \
              --classpath=src/psql/nodo/liquibase/changelog/wfesp \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName=wfesp \
              --defaultSchemaName=wfesp \
              --contexts=${{ parameters.k8sEnv }} \
              --log-level=${{ parameters.lbLogLevel }} \
              update -Dschema=wfesp -DschemaOnline=online
            displayName: "Run Liquibase wfesp"
