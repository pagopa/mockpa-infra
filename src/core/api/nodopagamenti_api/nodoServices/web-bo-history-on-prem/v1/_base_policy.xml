<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
	<inbound>
		<cors>
			<allowed-origins>
				<origin>*</origin>
			</allowed-origins>
			<allowed-methods>
				<method>*</method>
			</allowed-methods>
			<allowed-headers>
				<header>*</header>
			</allowed-headers>
			<expose-headers>
				<header>*</header>
			</expose-headers>
		</cors>
		<!-- check onprem pagopa vpn ips -->
		<choose>
			<!-- TODO Enable after ticket resolution -->
			<!-- <when condition="@(context.Request.Headers.GetValueOrDefault("X-Environment", "").Equals("uat"))">
        <check-header name="X-Forwarded-For" failed-check-httpcode="403" failed-check-error-message="Unauthorized" ignore-case="true">
          <value>93.63.219.230</value>
        </check-header>
      </when> -->
			<when condition="@(context.Request.Headers.GetValueOrDefault("X-Environment", "").Equals("prod"))">
				<check-header name="X-Forwarded-For" failed-check-httpcode="403" failed-check-error-message="Unauthorized" ignore-case="true">
					<value>${allowed_ip_1}</value>
					<value>${allowed_ip_2}</value>
					<value>${allowed_ip_3}</value>
					<value>${allowed_ip_4}</value>
					<value>${allowed_ip_5}</value>
					<value>${allowed_ip_6}</value>
					<value>${allowed_ip_7}</value>
					<value>${allowed_ip_8}</value>
					<value>${allowed_ip_9}</value>
				</check-header>
			</when>
		</choose>
		<set-variable name="external-scheme" value="https" />
		<set-variable name="external-host" value="wisp2.pagopa.gov.it" />

		<set-variable name="external-context-path" value="/bo-nodo-history/" />
		<choose>
			<when condition="@(Regex.IsMatch(context.Request.OriginalUrl.Path, @"^\/bo-nodo-history$", RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(500)))">
				<return-response>
					<set-status code="301" reason="See Other" />
					<set-header name="Location" exists-action="override">
						<value>@{
                            string str = (string)context.Variables["external-scheme"];
                            str += "://";
                            str += (string)context.Variables["external-host"];
                            str += (string)context.Variables["external-context-path"];
                            str += "/";
                            return str;
                        }</value>
					</set-header>
				</return-response>
			</when>
		</choose>
		<choose>
			<when condition="@(Regex.IsMatch(context.Request.OriginalUrl.Path, @"^\/bo-nodo-history/$", RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(500)))">
				<set-backend-service base-url="{{pm-onprem-hostname}}/bo-nodo-history/" />
			</when>
			<otherwise>
				<set-backend-service base-url="{{pm-onprem-hostname}}/bo-nodo-history" />
			</otherwise>
		</choose>
	</inbound>
	<backend>
		<base />
	</backend>
	<outbound>
		<base />
		<choose>
			<when condition="@(((string)context.Response.Headers.GetValueOrDefault("location","")).Contains("{{pm-onprem-hostname}}"))">
				<set-variable name="locationIn" value=" @(Regex.Replace((string)context.Response.Headers.GetValueOrDefault("location",""), "{{pm-onprem-hostname}}", "https://{{wisp2-gov-it}}"))" />
				<set-header name="location" exists-action="override">
					<value>@(context.Variables.GetValueOrDefault<string>("locationIn"))</value>
				</set-header>
			</when>
		</choose>
	</outbound>
	<on-error>
		<base />
	</on-error>
</policies>